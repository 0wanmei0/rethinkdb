#!/bin/bash

# Set up the directory
BENCH_DIR="$HOME/bench/$(date +%Y-%m-%d-%H:%M)"
mkdir -p "$BENCH_DIR"
rm -f $HOME/bench/latest
ln -s $BENCH_DIR $HOME/bench/latest
exec > "$BENCH_DIR/full_bench.log" 2>&1


# Horrible but working way of finding the argument after --email.
email="$(perl -e 'use List::Util qw(first); my $email_idx = 1 + first { $ARGV[$_] eq "--email" } 0 .. $#ARGV; print $ARGV[$email_idx]' -- "$@")"

# Build the server and the stress client
cd src
make clean
make -j DEBUG=0 VALGRIND=0
cd ../bench/stress-client
make
scp stress dr-doom:/home/teapot/stress
cd ../dbench

# Some helper functions
function delete_database_files() { # They are large and useless.
    rm -f "$(find "$BENCH_DIR" -name rethinkdb_data)"
}

# A regular benchmark is 10^9 operations, but when profiling, it's run 5 times, so we only do 10^8 operations.
DURATION=10000000
SSD_DRIVES='-f /dev/sdb -f /dev/sdc -f /dev/sdd -f /dev/sde'

# Canonical workload on the canonical setup
../../build/release/rethinkdb --create $SSD_DRIVES
./dbench                                                                                            \
    -d "$BENCH_DIR/bench_output/Canonical_workload_on_canonical_hardware" -H 10.0.0.2               \
    {server}rethinkdb:'-c 12 -m 32768 -f /dev/sdb -f /dev/sdc -f /dev/sdd -f /dev/sde'              \
    {client}stressfree[dr-doom:/home/teapot/stress]:'-c 512 -d 60s'                                 \
    iostat:1 vmstat:1 rdbstat:1

# Core scalability
# Out of RAM performance
# Concurrent clients scalability

# SSD I/O bound performance
../../build/release/rethinkdb --create $SSD_DRIVES
./dbench                                                                                            \
    -d "$BENCH_DIR/bench_output/SSD_IO_performance" -H 10.0.0.2                                     \
    {server}rethinkdb:'-c 12 -m 0 -f /dev/sdb -f /dev/sdc -f /dev/sdd -f /dev/sde'                  \
    {client}stressfree[dr-doom:/home/teapot/stress]:'-c 512 -d 60s'                                 \
    iostat:1 vmstat:1 rdbstat:1

# Canonical workload on HDD performance

# Pure inserts performance
../../build/release/rethinkdb --create $SSD_DRIVES
./dbench                                                                                            \
    -d "$BENCH_DIR/bench_output/Pure_inserts_on_canonical_hardware" -H 10.0.0.2                     \
    {server}rethinkdb:'-c 12 -m 32768 -f /dev/sdb -f /dev/sdc -f /dev/sdd -f /dev/sde'              \
    {client}stressfree[dr-doom:/home/teapot/stress]:'-c 512 -w 0/0/1/0 -o /home/teapot/tmp_keys -d 60s'          \
    iostat:1 vmstat:1 rdbstat:1

# Pure selects performance (run right after insert without recreating the database)
./dbench                                                                                            \
    -d "$BENCH_DIR/bench_output/Pure_selects_on_canonical_hardware" -H 10.0.0.2                     \
    {server}rethinkdb:'-c 12 -m 32768 -f /dev/sdb -f /dev/sdc -f /dev/sdd -f /dev/sde'              \
    {client}stressfree[dr-doom:/home/teapot/stress]:'-c 512 -w 0/0/0/1 -i /home/teapot/tmp_keys -d 60s'          \
    iostat:1 vmstat:1 rdbstat:1

# Durability settings performance
../../build/release/rethinkdb --create $SSD_DRIVES
./dbench                                                                                            \
    -d "$BENCH_DIR/bench_output/Strong_durability_performance" -H 10.0.0.2                          \
    {server}rethinkdb:'--wait-for-flush y --flush-timer 2 -c 12 -m 32768 -f /dev/sdb -f /dev/sdc -f /dev/sdd -f /dev/sde' \
    {client}stressfree[dr-doom:/home/teapot/stress]:'-c 512 -d 60s'                                 \
    iostat:1 vmstat:1 rdbstat:1

# Now that all benchmarks are done, delete any database files that might have been left over
delete_database_files

# OProfile example
#./dbench -d  "$BENCH_DIR/prof_output"     -H 10.0.0.2 {server}rethinkdb:'-c 12 -s 128' {client}stressfree[dr-doom:/home/teapot/stress]:'-c 512 -d 10000000'             iostat:1 vmstat:1 rdbstat:1 oprofile
#delete_database_files

# Generate statistics and email.
cd ../format
./report.py "$BENCH_DIR" "$email" > "$BENCH_DIR/report.log" 2>&1

