import sys, os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir + '/oprofile')))
from plot import *
from oprofile import *
from profiles import *
import time
import StringIO

class dbench():
    log_file = 'bench_log.txt'
    hostname = 'newton'
    www_dir = '/var/www/code.rethinkdb.com/htdocs/'
    prof_dir = 'prof_data' #directory on host where prof data goes
    out_dir = 'bench_html' #local directory to use for data
    bench_dir = 'bench_output'
    oprofile_dir = 'prof_output'

    def __init__(self, dir):
        self.dir_str = time.asctime().replace(' ', '_').replace(':', '_')
        os.makedirs(self.out_dir + '/' + self.dir_str)
        self.bench_stats = self.bench_stats(dir + self.bench_dir + '/1')
        rundirs = os.listdir(dir + '/' + self.oprofile_dir)
        rundirs.remove(self.log_file)
        rundirs.sort(key = lambda x: int(x))
        self.prof_stats = []
        for rundir in rundirs:
            self.prof_stats.append(self.oprofile_stats(dir + self.oprofile_dir + '/' + rundir + '/'))

    def report(self):
        self.html = self.report_as_html()
        self.push_html_to_host()
        self.send_email('all@rethinkdb.com')
        os.system('rm -rf %s' % self.out_dir)

    class bench_stats():
        iostat_path     = 'iostat/output.txt'
        vmstat_path     = 'vmstat/output.txt'
        latency_path    = 'client/latency.txt'
        qps_path        = 'client/qps.txt'
        rdbstat_path    = 'rdbstat/output.txt'
        def __init__(self, dir):
            self.timeseries = [IOStat().read(dir + '/' + self.iostat_path),
                               VMStat().read(dir + '/' + self.vmstat_path),
                               Latency().read(dir + '/' + self.latency_path),
                               QPS().read(dir + '/' + self.qps_path),
                               RDBStats().read(dir + '/' + self.rdbstat_path)]
            self.timeseries_names = ['iostat', 'vmstat', 'latency', 'qps', 'rdbstats']

    class oprofile_stats():
        oprofile_path   = 'oprofile/oprof.out.rethinkdb'

        def __init__(self, dir):
            self.oprofile  = parser().parse_file(dir + self.oprofile_path)

    def push_html_to_host(self):
        res = open(self.out_dir + '/index.html', 'w')

        print >>res, self.html
        res.close()

        #send stuff to host
        os.system('scp -r "%s" "%s:%s"' % (self.out_dir + '/' + self.dir_str, self.hostname, self.www_dir + self.prof_dir))
        os.system('scp "%s" "%s:%s"' % (self.out_dir + '/' + 'index.html', self.hostname, self.www_dir + self.prof_dir))

    def report_as_html(self):
        def image(source):
            return "<a href=\"%s\"> <img src=\"%s\" height=\"900\" width=\"1200\" /> </a>" % (source, source)

        res = StringIO.StringIO()
        print >>res, """<html>"""

        print >>res, "<p> RethinkDB profiling report, autogenerated on %s </p>" % self.dir_str
        for name, timeseries in zip(self.bench_stats.timeseries_names, self.bench_stats.timeseries):
            if timeseries.data:
                timeseries.plot(self.out_dir + """/""" + self.dir_str + """/""" + name)
                print >>res, "<p> %s: </p>" % name
                print >>res, image("""http://""" + self.hostname + """/""" + self.prof_dir + """/""" + self.dir_str + """/""" + name + """.png""") #TODO use no-ip


        prog_report = reduce(lambda x,y: x + y, (map(lambda x: x.oprofile, self.prof_stats)))
        ratios = reduce(lambda x,y: x + y, map(lambda x: x.ratios, small_packet_profiles))
        print >>res, prog_report.report_as_html(ratios, CPU_CLK_UNHALTED, 15)

        print >>res, """</html>"""
        return res.getvalue()

    def send_email(self, recipient):
        print "Sending email to %r..." % recipient
        
        num_tries = 10
        try_interval = 10   # Seconds
        smtp_server, smtp_port = os.environ.get("RETESTER_SMTP", "smtp.gmail.com:587").split(":")
        
        import smtplib

        for tries in range(num_tries):
            try:
                s = smtplib.SMTP(smtp_server, smtp_port)
            except socket.gaierror:
                # Network is being funny. Try again.
                time.sleep(try_interval)
            else:
                break
        else:
            raise Exception("Cannot connect to SMTP server '%s'" % smtp_server)
        
        sender, sender_pw = 'buildbot@rethinkdb.com', 'allspark'
        
        s.starttls()
        s.login(sender, sender_pw)
        header = 'Subject: Profiling results\nContent-Type: text/html\n\n'
        s.sendmail(sender, [recipient], header + self.html)
        s.quit()
        
        print "Email message sent."
