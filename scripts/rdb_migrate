#!/bin/bash -vx
usage() {
    echo "Usage:"
    echo "      $0 [OPTIONS] -i <old_file_1> [-i <old_file_2> ...] -o <new_file_1> [-o <new_file_2> ...]"
    echo "      Migrate from old rethinkdb database"
    echo "Options:"
}

infile=()
outfile=()
old_rdb='old_rethinkdb' #previous rethinkdb version
new_rdb='rethinkdb' #new rethinkdb version

while getopts i:o:p:r: name
do
    case "$name" in
    i)      infile+=("$OPTARG");;
    o)      outfile+=("$OPTARG");;
    r)      new_rdb=("$OPTARG");;
    ?)      usage
            exit 2;;
    esac
done

echo ${infile[@]}
echo ${outfile[@]}

filecl=()
for file in ${infile[@]}
do
    filecl+=("-f" $file)
done

version=`$new_rdb fsck ${filecl[@]} -c | grep version: | sed 's/static_header version: \([0-9\.]*\)/\1/'`

if [ $version = "0.1" ]
then
    old_rdb=/usr/bin/rethinkdb1.0
fi

$old_rdb extract ${filecl[@]} -o /tmp/rdb_migration_buffer
flags=`$old_rdb fsck ${filecl[@]} -c | grep FLAGS: | sed s/FLAGS://`

if [ ${outfile[@]} -ne 0 ]
then
    filecl=()
    for file in ${outfile[@]}
    do
        filecl+=("-f" $file)
    done
fi

port=`unused_port`
if [ "${#port}" -eq 0 ]
then
    port=12345
fi

$new_rdb create --force ${filecl[@]} $flags
$new_rdb ${filecl[@]} $flags -p "$port"&
while ! nc -q 1 localhost "$port" </dev/null; do sleep 2; done
(cat /tmp/rdb_migration_buffer && echo "rdb shutdown") | nc localhost "$port"
