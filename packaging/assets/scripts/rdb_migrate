#!/bin/bash

#get errors out of our pipes
set -eou pipefail

function check {
    if [ "$1" -ne 0 ]
    then
        echo $2 >&2
        exit "$1"
    fi
}

function croak {
    echo "$1" >&2
    exit 1
}

infile=()
outfile=()
old_rdb='' #previous rethinkdb version
new_rdb='rethinkdb' #new rethinkdb version
intermediate_file=''
force=false

while getopts i:o:p:r:s:f name
do
    case "$name" in
    i)      infile+=("$OPTARG");;
    o)      outfile+=("$OPTARG");;
    r)      new_rdb=("$OPTARG");;
    s)      intermediate_file="$OPTARG";;
    f)      force=true;;
    ?)      exit 2;;
    esac
done

if [ ${#infile[@]} -le "0" ]
then
    echo "No infile given. You probably don't want to run this script directly." >&2
    echo "Please use \"rethinkdb migrate\" instead. See \"rethinkdb migrate help\" for more information." >&2
    exit 1
fi

infilecl=()
for file in "${infile[@]}"
do
    infilecl+=("-f")
    infilecl+=("$file")
done

outfilecl=()
if [ ${#outfile[@]} -gt "0" ]
then
    for file in "${outfile[@]}"
    do
        outfilecl+=("-f")
        outfilecl+=("$file")
    done
else 
    outfilecl="${infilecl[@]}"
fi

version="$("$new_rdb" fsck "${infilecl[@]}" -v | grep VERSION: | sed 's/VERSION: \([0-9\.]*\)/\1/')"
check "$?" "Version extraction failed"

#TODO this should maybe be a seperate file... might not be so important
if [ "$version" = "0.1" ]
then
    old_rdb=/usr/bin/rethinkdb1.0
else
    croak "Unrecognized file version: $version"
fi

#Assemble the flags for creating the new database
flags="$("$old_rdb" fsck "${infilecl[@]}" -c -l /dev/null | grep FLAGS: | sed s/FLAGS://)"
check "$?" "Parameter extraction failed."

if [ "$force" = "true" ]
then
    flags+=" --force "
fi

echo -n "Extracting old data.. "
"$old_rdb" extract "${infilecl[@]}" -o "$intermediate_file" -l /dev/null
check "$?" "Extraction failed."
echo "done"

echo -n "Creating new database.. "
"$new_rdb" create "${outfilecl[@]}" $flags -l /dev/null
check "$?" "New database creation failed."
echo "done"

echo -n "Importing data.. "
"$new_rdb" import "${outfilecl[@]}" --memcached-file "$intermediate_file" -l /dev/null
check "$?" "Importing data into new database failed."
echo "done"

