#ifndef RPC_MAILBOX_TYPED_HPP_
#define RPC_MAILBOX_TYPED_HPP_

/* This file is automatically generated by '../scripts/generate_rpc_templates.py'.
Please modify '../scripts/generate_rpc_templates.py' instead of modifying this file.*/

#include "containers/archive/archive.hpp"
#include "rpc/serialize_macros.hpp"
#include "rpc/mailbox/mailbox.hpp"

/* If you pass `mailbox_callback_mode_coroutine` to the `mailbox_t` 
constructor, it will spawn the callback in a new coroutine. If you 
`mailbox_callback_mode_inline`, it will call the callback inline 
and the callback must not block. The former is the default for 
historical reasons, but the latter is better. Eventually the former 
will go away. */
enum mailbox_callback_mode_t {
    mailbox_callback_mode_coroutine,
    mailbox_callback_mode_inline
};

template<class invalid_proto_t> class mailbox_t {
    /* If someone tries to instantiate `mailbox_t` 
    incorrectly, this should cause an error. */
    typename invalid_proto_t::you_are_using_mailbox_t_incorrectly foo;
};

template<class invalid_proto_t> class mailbox_addr_t {
    // If someone tries to instantiate mailbox_addr_t incorrectly,
    // this should cause an error.
    typename invalid_proto_t::you_are_using_mailbox_addr_t_incorrectly foo;
};

template<>
class mailbox_addr_t< void() > {
public:
    bool is_nil() const { return addr.is_nil(); }
    peer_id_t get_peer() const { return addr.get_peer(); }

    friend class mailbox_t< void() >;

    RDB_MAKE_ME_SERIALIZABLE_1(addr)
private:
    friend void send(mailbox_manager_t*, mailbox_addr_t);
    raw_mailbox_t::address_t addr;
};

template<>
class mailbox_t< void() > {
public:
    typedef mailbox_addr_t< void() > address_t;

    mailbox_t(mailbox_manager_t *manager, const boost::function< void() > &f, mailbox_callback_mode_t cbm = mailbox_callback_mode_coroutine) :
        fun(f), callback_mode(cbm), mailbox(manager, boost::bind(&mailbox_t::on_message, this, _1))
        { }

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    friend void send(mailbox_manager_t*, address_t);
    static void write(write_stream_t *stream) {
        write_message_t msg;
        int res = send_write_message(stream, &msg);
        if (res) { throw fake_archive_exc_t(); }
    }
    void on_message(UNUSED read_stream_t *stream) {
        if (callback_mode == mailbox_callback_mode_coroutine) {
            coro_t::spawn_sometime(boost::bind(fun));
        } else {
            fun();
        }
    }

    boost::function< void() > fun;
    mailbox_callback_mode_t callback_mode;
    raw_mailbox_t mailbox;
};

inline
void send(mailbox_manager_t *src, mailbox_t< void() >::address_t dest) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void() >::write, _1));
}


template<class arg0_t>
class mailbox_addr_t< void(arg0_t) > {
public:
    bool is_nil() const { return addr.is_nil(); }
    peer_id_t get_peer() const { return addr.get_peer(); }

    friend class mailbox_t< void(arg0_t) >;

    RDB_MAKE_ME_SERIALIZABLE_1(addr)
private:
    template<class a0_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t) >::address_t, const a0_t&);
    raw_mailbox_t::address_t addr;
};

template<class arg0_t>
class mailbox_t< void(arg0_t) > {
public:
    typedef mailbox_addr_t< void(arg0_t) > address_t;

    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t) > &f, mailbox_callback_mode_t cbm = mailbox_callback_mode_coroutine) :
        fun(f), callback_mode(cbm), mailbox(manager, boost::bind(&mailbox_t::on_message, this, _1))
        { }

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t) >::address_t, const a0_t&);
    static void write(write_stream_t *stream, const arg0_t &arg0) {
        write_message_t msg;
        msg << arg0;
        int res = send_write_message(stream, &msg);
        if (res) { throw fake_archive_exc_t(); }
    }
    void on_message(read_stream_t *stream) {
        arg0_t arg0;
        int res = deserialize(stream, &arg0);
        if (res) { throw fake_archive_exc_t(); }
        if (callback_mode == mailbox_callback_mode_coroutine) {
            coro_t::spawn_sometime(boost::bind(fun, arg0));
        } else {
            fun(arg0);
        }
    }

    boost::function< void(arg0_t) > fun;
    mailbox_callback_mode_t callback_mode;
    raw_mailbox_t mailbox;
};

template<class arg0_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t) >::address_t dest, const arg0_t &arg0) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t) >::write, _1, boost::ref(arg0)));
}


template<class arg0_t, class arg1_t>
class mailbox_addr_t< void(arg0_t, arg1_t) > {
public:
    bool is_nil() const { return addr.is_nil(); }
    peer_id_t get_peer() const { return addr.get_peer(); }

    friend class mailbox_t< void(arg0_t, arg1_t) >;

    RDB_MAKE_ME_SERIALIZABLE_1(addr)
private:
    template<class a0_t, class a1_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t) >::address_t, const a0_t&, const a1_t&);
    raw_mailbox_t::address_t addr;
};

template<class arg0_t, class arg1_t>
class mailbox_t< void(arg0_t, arg1_t) > {
public:
    typedef mailbox_addr_t< void(arg0_t, arg1_t) > address_t;

    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t) > &f, mailbox_callback_mode_t cbm = mailbox_callback_mode_coroutine) :
        fun(f), callback_mode(cbm), mailbox(manager, boost::bind(&mailbox_t::on_message, this, _1))
        { }

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t) >::address_t, const a0_t&, const a1_t&);
    static void write(write_stream_t *stream, const arg0_t &arg0, const arg1_t &arg1) {
        write_message_t msg;
        msg << arg0;
        msg << arg1;
        int res = send_write_message(stream, &msg);
        if (res) { throw fake_archive_exc_t(); }
    }
    void on_message(read_stream_t *stream) {
        arg0_t arg0;
        arg1_t arg1;
        int res = deserialize(stream, &arg0);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg1);
        if (res) { throw fake_archive_exc_t(); }
        if (callback_mode == mailbox_callback_mode_coroutine) {
            coro_t::spawn_sometime(boost::bind(fun, arg0, arg1));
        } else {
            fun(arg0, arg1);
        }
    }

    boost::function< void(arg0_t, arg1_t) > fun;
    mailbox_callback_mode_t callback_mode;
    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t) >::write, _1, boost::ref(arg0), boost::ref(arg1)));
}


template<class arg0_t, class arg1_t, class arg2_t>
class mailbox_addr_t< void(arg0_t, arg1_t, arg2_t) > {
public:
    bool is_nil() const { return addr.is_nil(); }
    peer_id_t get_peer() const { return addr.get_peer(); }

    friend class mailbox_t< void(arg0_t, arg1_t, arg2_t) >;

    RDB_MAKE_ME_SERIALIZABLE_1(addr)
private:
    template<class a0_t, class a1_t, class a2_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t) >::address_t, const a0_t&, const a1_t&, const a2_t&);
    raw_mailbox_t::address_t addr;
};

template<class arg0_t, class arg1_t, class arg2_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t) > {
public:
    typedef mailbox_addr_t< void(arg0_t, arg1_t, arg2_t) > address_t;

    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t) > &f, mailbox_callback_mode_t cbm = mailbox_callback_mode_coroutine) :
        fun(f), callback_mode(cbm), mailbox(manager, boost::bind(&mailbox_t::on_message, this, _1))
        { }

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t) >::address_t, const a0_t&, const a1_t&, const a2_t&);
    static void write(write_stream_t *stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2) {
        write_message_t msg;
        msg << arg0;
        msg << arg1;
        msg << arg2;
        int res = send_write_message(stream, &msg);
        if (res) { throw fake_archive_exc_t(); }
    }
    void on_message(read_stream_t *stream) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        int res = deserialize(stream, &arg0);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg1);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg2);
        if (res) { throw fake_archive_exc_t(); }
        if (callback_mode == mailbox_callback_mode_coroutine) {
            coro_t::spawn_sometime(boost::bind(fun, arg0, arg1, arg2));
        } else {
            fun(arg0, arg1, arg2);
        }
    }

    boost::function< void(arg0_t, arg1_t, arg2_t) > fun;
    mailbox_callback_mode_t callback_mode;
    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t) >::write, _1, boost::ref(arg0), boost::ref(arg1), boost::ref(arg2)));
}


template<class arg0_t, class arg1_t, class arg2_t, class arg3_t>
class mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t) > {
public:
    bool is_nil() const { return addr.is_nil(); }
    peer_id_t get_peer() const { return addr.get_peer(); }

    friend class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t) >;

    RDB_MAKE_ME_SERIALIZABLE_1(addr)
private:
    template<class a0_t, class a1_t, class a2_t, class a3_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&);
    raw_mailbox_t::address_t addr;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t) > {
public:
    typedef mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t) > address_t;

    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t) > &f, mailbox_callback_mode_t cbm = mailbox_callback_mode_coroutine) :
        fun(f), callback_mode(cbm), mailbox(manager, boost::bind(&mailbox_t::on_message, this, _1))
        { }

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&);
    static void write(write_stream_t *stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3) {
        write_message_t msg;
        msg << arg0;
        msg << arg1;
        msg << arg2;
        msg << arg3;
        int res = send_write_message(stream, &msg);
        if (res) { throw fake_archive_exc_t(); }
    }
    void on_message(read_stream_t *stream) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        int res = deserialize(stream, &arg0);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg1);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg2);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg3);
        if (res) { throw fake_archive_exc_t(); }
        if (callback_mode == mailbox_callback_mode_coroutine) {
            coro_t::spawn_sometime(boost::bind(fun, arg0, arg1, arg2, arg3));
        } else {
            fun(arg0, arg1, arg2, arg3);
        }
    }

    boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t) > fun;
    mailbox_callback_mode_t callback_mode;
    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t) >::write, _1, boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3)));
}


template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t>
class mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t) > {
public:
    bool is_nil() const { return addr.is_nil(); }
    peer_id_t get_peer() const { return addr.get_peer(); }

    friend class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t) >;

    RDB_MAKE_ME_SERIALIZABLE_1(addr)
private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&);
    raw_mailbox_t::address_t addr;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t) > {
public:
    typedef mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t) > address_t;

    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t) > &f, mailbox_callback_mode_t cbm = mailbox_callback_mode_coroutine) :
        fun(f), callback_mode(cbm), mailbox(manager, boost::bind(&mailbox_t::on_message, this, _1))
        { }

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&);
    static void write(write_stream_t *stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4) {
        write_message_t msg;
        msg << arg0;
        msg << arg1;
        msg << arg2;
        msg << arg3;
        msg << arg4;
        int res = send_write_message(stream, &msg);
        if (res) { throw fake_archive_exc_t(); }
    }
    void on_message(read_stream_t *stream) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        int res = deserialize(stream, &arg0);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg1);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg2);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg3);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg4);
        if (res) { throw fake_archive_exc_t(); }
        if (callback_mode == mailbox_callback_mode_coroutine) {
            coro_t::spawn_sometime(boost::bind(fun, arg0, arg1, arg2, arg3, arg4));
        } else {
            fun(arg0, arg1, arg2, arg3, arg4);
        }
    }

    boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t) > fun;
    mailbox_callback_mode_t callback_mode;
    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t) >::write, _1, boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4)));
}


template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t>
class mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t) > {
public:
    bool is_nil() const { return addr.is_nil(); }
    peer_id_t get_peer() const { return addr.get_peer(); }

    friend class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t) >;

    RDB_MAKE_ME_SERIALIZABLE_1(addr)
private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&);
    raw_mailbox_t::address_t addr;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t) > {
public:
    typedef mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t) > address_t;

    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t) > &f, mailbox_callback_mode_t cbm = mailbox_callback_mode_coroutine) :
        fun(f), callback_mode(cbm), mailbox(manager, boost::bind(&mailbox_t::on_message, this, _1))
        { }

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&);
    static void write(write_stream_t *stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5) {
        write_message_t msg;
        msg << arg0;
        msg << arg1;
        msg << arg2;
        msg << arg3;
        msg << arg4;
        msg << arg5;
        int res = send_write_message(stream, &msg);
        if (res) { throw fake_archive_exc_t(); }
    }
    void on_message(read_stream_t *stream) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        int res = deserialize(stream, &arg0);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg1);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg2);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg3);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg4);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg5);
        if (res) { throw fake_archive_exc_t(); }
        if (callback_mode == mailbox_callback_mode_coroutine) {
            coro_t::spawn_sometime(boost::bind(fun, arg0, arg1, arg2, arg3, arg4, arg5));
        } else {
            fun(arg0, arg1, arg2, arg3, arg4, arg5);
        }
    }

    boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t) > fun;
    mailbox_callback_mode_t callback_mode;
    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t) >::write, _1, boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4), boost::ref(arg5)));
}


template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t>
class mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t) > {
public:
    bool is_nil() const { return addr.is_nil(); }
    peer_id_t get_peer() const { return addr.get_peer(); }

    friend class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t) >;

    RDB_MAKE_ME_SERIALIZABLE_1(addr)
private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&);
    raw_mailbox_t::address_t addr;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t) > {
public:
    typedef mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t) > address_t;

    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t) > &f, mailbox_callback_mode_t cbm = mailbox_callback_mode_coroutine) :
        fun(f), callback_mode(cbm), mailbox(manager, boost::bind(&mailbox_t::on_message, this, _1))
        { }

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&);
    static void write(write_stream_t *stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6) {
        write_message_t msg;
        msg << arg0;
        msg << arg1;
        msg << arg2;
        msg << arg3;
        msg << arg4;
        msg << arg5;
        msg << arg6;
        int res = send_write_message(stream, &msg);
        if (res) { throw fake_archive_exc_t(); }
    }
    void on_message(read_stream_t *stream) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        int res = deserialize(stream, &arg0);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg1);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg2);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg3);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg4);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg5);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg6);
        if (res) { throw fake_archive_exc_t(); }
        if (callback_mode == mailbox_callback_mode_coroutine) {
            coro_t::spawn_sometime(boost::bind(fun, arg0, arg1, arg2, arg3, arg4, arg5, arg6));
        } else {
            fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
    }

    boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t) > fun;
    mailbox_callback_mode_t callback_mode;
    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t) >::write, _1, boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4), boost::ref(arg5), boost::ref(arg6)));
}


template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t>
class mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t) > {
public:
    bool is_nil() const { return addr.is_nil(); }
    peer_id_t get_peer() const { return addr.get_peer(); }

    friend class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t) >;

    RDB_MAKE_ME_SERIALIZABLE_1(addr)
private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&);
    raw_mailbox_t::address_t addr;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t) > {
public:
    typedef mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t) > address_t;

    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t) > &f, mailbox_callback_mode_t cbm = mailbox_callback_mode_coroutine) :
        fun(f), callback_mode(cbm), mailbox(manager, boost::bind(&mailbox_t::on_message, this, _1))
        { }

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&);
    static void write(write_stream_t *stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7) {
        write_message_t msg;
        msg << arg0;
        msg << arg1;
        msg << arg2;
        msg << arg3;
        msg << arg4;
        msg << arg5;
        msg << arg6;
        msg << arg7;
        int res = send_write_message(stream, &msg);
        if (res) { throw fake_archive_exc_t(); }
    }
    void on_message(read_stream_t *stream) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        arg7_t arg7;
        int res = deserialize(stream, &arg0);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg1);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg2);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg3);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg4);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg5);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg6);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg7);
        if (res) { throw fake_archive_exc_t(); }
        if (callback_mode == mailbox_callback_mode_coroutine) {
            coro_t::spawn_sometime(boost::bind(fun, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
        } else {
            fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
    }

    boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t) > fun;
    mailbox_callback_mode_t callback_mode;
    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t) >::write, _1, boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4), boost::ref(arg5), boost::ref(arg6), boost::ref(arg7)));
}


template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t>
class mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t) > {
public:
    bool is_nil() const { return addr.is_nil(); }
    peer_id_t get_peer() const { return addr.get_peer(); }

    friend class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t) >;

    RDB_MAKE_ME_SERIALIZABLE_1(addr)
private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&);
    raw_mailbox_t::address_t addr;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t) > {
public:
    typedef mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t) > address_t;

    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t) > &f, mailbox_callback_mode_t cbm = mailbox_callback_mode_coroutine) :
        fun(f), callback_mode(cbm), mailbox(manager, boost::bind(&mailbox_t::on_message, this, _1))
        { }

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&);
    static void write(write_stream_t *stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8) {
        write_message_t msg;
        msg << arg0;
        msg << arg1;
        msg << arg2;
        msg << arg3;
        msg << arg4;
        msg << arg5;
        msg << arg6;
        msg << arg7;
        msg << arg8;
        int res = send_write_message(stream, &msg);
        if (res) { throw fake_archive_exc_t(); }
    }
    void on_message(read_stream_t *stream) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        arg7_t arg7;
        arg8_t arg8;
        int res = deserialize(stream, &arg0);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg1);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg2);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg3);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg4);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg5);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg6);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg7);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg8);
        if (res) { throw fake_archive_exc_t(); }
        if (callback_mode == mailbox_callback_mode_coroutine) {
            coro_t::spawn_sometime(boost::bind(fun, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8));
        } else {
            fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
    }

    boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t) > fun;
    mailbox_callback_mode_t callback_mode;
    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t) >::write, _1, boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4), boost::ref(arg5), boost::ref(arg6), boost::ref(arg7), boost::ref(arg8)));
}


template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t>
class mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t) > {
public:
    bool is_nil() const { return addr.is_nil(); }
    peer_id_t get_peer() const { return addr.get_peer(); }

    friend class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t) >;

    RDB_MAKE_ME_SERIALIZABLE_1(addr)
private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&);
    raw_mailbox_t::address_t addr;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t) > {
public:
    typedef mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t) > address_t;

    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t) > &f, mailbox_callback_mode_t cbm = mailbox_callback_mode_coroutine) :
        fun(f), callback_mode(cbm), mailbox(manager, boost::bind(&mailbox_t::on_message, this, _1))
        { }

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&);
    static void write(write_stream_t *stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9) {
        write_message_t msg;
        msg << arg0;
        msg << arg1;
        msg << arg2;
        msg << arg3;
        msg << arg4;
        msg << arg5;
        msg << arg6;
        msg << arg7;
        msg << arg8;
        msg << arg9;
        int res = send_write_message(stream, &msg);
        if (res) { throw fake_archive_exc_t(); }
    }
    void on_message(read_stream_t *stream) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        arg7_t arg7;
        arg8_t arg8;
        arg9_t arg9;
        int res = deserialize(stream, &arg0);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg1);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg2);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg3);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg4);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg5);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg6);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg7);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg8);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg9);
        if (res) { throw fake_archive_exc_t(); }
        if (callback_mode == mailbox_callback_mode_coroutine) {
            coro_t::spawn_sometime(boost::bind(fun, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9));
        } else {
            fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }
    }

    boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t) > fun;
    mailbox_callback_mode_t callback_mode;
    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t) >::write, _1, boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4), boost::ref(arg5), boost::ref(arg6), boost::ref(arg7), boost::ref(arg8), boost::ref(arg9)));
}


template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t>
class mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t) > {
public:
    bool is_nil() const { return addr.is_nil(); }
    peer_id_t get_peer() const { return addr.get_peer(); }

    friend class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t) >;

    RDB_MAKE_ME_SERIALIZABLE_1(addr)
private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&);
    raw_mailbox_t::address_t addr;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t) > {
public:
    typedef mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t) > address_t;

    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t) > &f, mailbox_callback_mode_t cbm = mailbox_callback_mode_coroutine) :
        fun(f), callback_mode(cbm), mailbox(manager, boost::bind(&mailbox_t::on_message, this, _1))
        { }

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&);
    static void write(write_stream_t *stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10) {
        write_message_t msg;
        msg << arg0;
        msg << arg1;
        msg << arg2;
        msg << arg3;
        msg << arg4;
        msg << arg5;
        msg << arg6;
        msg << arg7;
        msg << arg8;
        msg << arg9;
        msg << arg10;
        int res = send_write_message(stream, &msg);
        if (res) { throw fake_archive_exc_t(); }
    }
    void on_message(read_stream_t *stream) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        arg7_t arg7;
        arg8_t arg8;
        arg9_t arg9;
        arg10_t arg10;
        int res = deserialize(stream, &arg0);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg1);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg2);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg3);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg4);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg5);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg6);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg7);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg8);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg9);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg10);
        if (res) { throw fake_archive_exc_t(); }
        if (callback_mode == mailbox_callback_mode_coroutine) {
            coro_t::spawn_sometime(boost::bind(fun, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10));
        } else {
            fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        }
    }

    boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t) > fun;
    mailbox_callback_mode_t callback_mode;
    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t) >::write, _1, boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4), boost::ref(arg5), boost::ref(arg6), boost::ref(arg7), boost::ref(arg8), boost::ref(arg9), boost::ref(arg10)));
}


template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t, class arg11_t>
class mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t) > {
public:
    bool is_nil() const { return addr.is_nil(); }
    peer_id_t get_peer() const { return addr.get_peer(); }

    friend class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t) >;

    RDB_MAKE_ME_SERIALIZABLE_1(addr)
private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t, class a11_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t, a11_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&, const a11_t&);
    raw_mailbox_t::address_t addr;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t, class arg11_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t) > {
public:
    typedef mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t) > address_t;

    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t) > &f, mailbox_callback_mode_t cbm = mailbox_callback_mode_coroutine) :
        fun(f), callback_mode(cbm), mailbox(manager, boost::bind(&mailbox_t::on_message, this, _1))
        { }

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t, class a11_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t, a11_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&, const a11_t&);
    static void write(write_stream_t *stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10, const arg11_t &arg11) {
        write_message_t msg;
        msg << arg0;
        msg << arg1;
        msg << arg2;
        msg << arg3;
        msg << arg4;
        msg << arg5;
        msg << arg6;
        msg << arg7;
        msg << arg8;
        msg << arg9;
        msg << arg10;
        msg << arg11;
        int res = send_write_message(stream, &msg);
        if (res) { throw fake_archive_exc_t(); }
    }
    void on_message(read_stream_t *stream) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        arg7_t arg7;
        arg8_t arg8;
        arg9_t arg9;
        arg10_t arg10;
        arg11_t arg11;
        int res = deserialize(stream, &arg0);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg1);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg2);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg3);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg4);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg5);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg6);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg7);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg8);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg9);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg10);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg11);
        if (res) { throw fake_archive_exc_t(); }
        if (callback_mode == mailbox_callback_mode_coroutine) {
            coro_t::spawn_sometime(boost::bind(fun, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11));
        } else {
            fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
        }
    }

    boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t) > fun;
    mailbox_callback_mode_t callback_mode;
    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t, class arg11_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10, const arg11_t &arg11) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t) >::write, _1, boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4), boost::ref(arg5), boost::ref(arg6), boost::ref(arg7), boost::ref(arg8), boost::ref(arg9), boost::ref(arg10), boost::ref(arg11)));
}


template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t, class arg11_t, class arg12_t>
class mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t) > {
public:
    bool is_nil() const { return addr.is_nil(); }
    peer_id_t get_peer() const { return addr.get_peer(); }

    friend class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t) >;

    RDB_MAKE_ME_SERIALIZABLE_1(addr)
private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t, class a11_t, class a12_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t, a11_t, a12_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&, const a11_t&, const a12_t&);
    raw_mailbox_t::address_t addr;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t, class arg11_t, class arg12_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t) > {
public:
    typedef mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t) > address_t;

    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t) > &f, mailbox_callback_mode_t cbm = mailbox_callback_mode_coroutine) :
        fun(f), callback_mode(cbm), mailbox(manager, boost::bind(&mailbox_t::on_message, this, _1))
        { }

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t, class a11_t, class a12_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t, a11_t, a12_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&, const a11_t&, const a12_t&);
    static void write(write_stream_t *stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10, const arg11_t &arg11, const arg12_t &arg12) {
        write_message_t msg;
        msg << arg0;
        msg << arg1;
        msg << arg2;
        msg << arg3;
        msg << arg4;
        msg << arg5;
        msg << arg6;
        msg << arg7;
        msg << arg8;
        msg << arg9;
        msg << arg10;
        msg << arg11;
        msg << arg12;
        int res = send_write_message(stream, &msg);
        if (res) { throw fake_archive_exc_t(); }
    }
    void on_message(read_stream_t *stream) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        arg7_t arg7;
        arg8_t arg8;
        arg9_t arg9;
        arg10_t arg10;
        arg11_t arg11;
        arg12_t arg12;
        int res = deserialize(stream, &arg0);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg1);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg2);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg3);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg4);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg5);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg6);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg7);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg8);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg9);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg10);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg11);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg12);
        if (res) { throw fake_archive_exc_t(); }
        if (callback_mode == mailbox_callback_mode_coroutine) {
            coro_t::spawn_sometime(boost::bind(fun, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12));
        } else {
            fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
        }
    }

    boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t) > fun;
    mailbox_callback_mode_t callback_mode;
    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t, class arg11_t, class arg12_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10, const arg11_t &arg11, const arg12_t &arg12) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t) >::write, _1, boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4), boost::ref(arg5), boost::ref(arg6), boost::ref(arg7), boost::ref(arg8), boost::ref(arg9), boost::ref(arg10), boost::ref(arg11), boost::ref(arg12)));
}


template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t, class arg11_t, class arg12_t, class arg13_t>
class mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t, arg13_t) > {
public:
    bool is_nil() const { return addr.is_nil(); }
    peer_id_t get_peer() const { return addr.get_peer(); }

    friend class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t, arg13_t) >;

    RDB_MAKE_ME_SERIALIZABLE_1(addr)
private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t, class a11_t, class a12_t, class a13_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t, a11_t, a12_t, a13_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&, const a11_t&, const a12_t&, const a13_t&);
    raw_mailbox_t::address_t addr;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t, class arg11_t, class arg12_t, class arg13_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t, arg13_t) > {
public:
    typedef mailbox_addr_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t, arg13_t) > address_t;

    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t, arg13_t) > &f, mailbox_callback_mode_t cbm = mailbox_callback_mode_coroutine) :
        fun(f), callback_mode(cbm), mailbox(manager, boost::bind(&mailbox_t::on_message, this, _1))
        { }

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t, class a11_t, class a12_t, class a13_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t, a11_t, a12_t, a13_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&, const a11_t&, const a12_t&, const a13_t&);
    static void write(write_stream_t *stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10, const arg11_t &arg11, const arg12_t &arg12, const arg13_t &arg13) {
        write_message_t msg;
        msg << arg0;
        msg << arg1;
        msg << arg2;
        msg << arg3;
        msg << arg4;
        msg << arg5;
        msg << arg6;
        msg << arg7;
        msg << arg8;
        msg << arg9;
        msg << arg10;
        msg << arg11;
        msg << arg12;
        msg << arg13;
        int res = send_write_message(stream, &msg);
        if (res) { throw fake_archive_exc_t(); }
    }
    void on_message(read_stream_t *stream) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        arg7_t arg7;
        arg8_t arg8;
        arg9_t arg9;
        arg10_t arg10;
        arg11_t arg11;
        arg12_t arg12;
        arg13_t arg13;
        int res = deserialize(stream, &arg0);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg1);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg2);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg3);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg4);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg5);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg6);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg7);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg8);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg9);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg10);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg11);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg12);
        if (res) { throw fake_archive_exc_t(); }
        res = deserialize(stream, &arg13);
        if (res) { throw fake_archive_exc_t(); }
        if (callback_mode == mailbox_callback_mode_coroutine) {
            coro_t::spawn_sometime(boost::bind(fun, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13));
        } else {
            fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
        }
    }

    boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t, arg13_t) > fun;
    mailbox_callback_mode_t callback_mode;
    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t, class arg11_t, class arg12_t, class arg13_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t, arg13_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10, const arg11_t &arg11, const arg12_t &arg12, const arg13_t &arg13) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t, arg13_t) >::write, _1, boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4), boost::ref(arg5), boost::ref(arg6), boost::ref(arg7), boost::ref(arg8), boost::ref(arg9), boost::ref(arg10), boost::ref(arg11), boost::ref(arg12), boost::ref(arg13)));
}

#endif // RPC_MAILBOX_TYPED_HPP_
