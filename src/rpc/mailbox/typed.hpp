#ifndef __RPC_MAILBOX_TYPED_HPP__
#define __RPC_MAILBOX_TYPED_HPP__

/* This file is automatically generated by '../scripts/generate_rpc_templates.py'.
Please modify '../scripts/generate_rpc_templates.py' instead of modifying this file.*/

#include "errors.hpp"
#include <boost/archive/binary_iarchive.hpp>
#include <boost/archive/binary_oarchive.hpp>
#include "rpc/serialize_macros.hpp"
#include "rpc/mailbox/mailbox.hpp"

template<class invalid_proto_t> class mailbox_t {
    /* If someone tries to instantiate `mailbox_t` 
    incorrectly, this should cause an error. */
    typename invalid_proto_t::you_are_using_mailbox_t_incorrectly foo;
};

template<>
class mailbox_t< void() > {

public:
    mailbox_t(mailbox_manager_t *manager, const boost::function< void() > &fun) :
        mailbox(manager, boost::bind(&mailbox_t::on_message, _1, _2, fun))
        {
            rassert(fun);
        }

    ~mailbox_t() {
    }

    class address_t {
    public:
        bool is_nil() { return addr.is_nil(); }
        peer_id_t get_peer() { return addr.get_peer(); }
        RDB_MAKE_ME_SERIALIZABLE_1(addr)
    private:
        friend class mailbox_t;
        friend void send(mailbox_manager_t*, address_t);
        raw_mailbox_t::address_t addr;
    };

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    friend void send(mailbox_manager_t*, address_t);
    static void write(std::ostream &stream) {
        boost::archive::binary_oarchive archive(stream);
    }
    static void on_message(std::istream &stream, const boost::function<void()> &done, const boost::function< void() > &fun) {
        {
            boost::archive::binary_iarchive archive(stream);
        }
        done();
        fun();
    }

    raw_mailbox_t mailbox;
};

inline
void send(mailbox_manager_t *src, mailbox_t< void() >::address_t dest) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void() >::write, _1));
}

template<class arg0_t>
class mailbox_t< void(arg0_t) > {

public:
    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t) > &fun) :
        mailbox(manager, boost::bind(&mailbox_t::on_message, _1, _2, fun))
        {
            rassert(fun);
        }

    ~mailbox_t() {
    }

    class address_t {
    public:
        bool is_nil() { return addr.is_nil(); }
        peer_id_t get_peer() { return addr.get_peer(); }
        RDB_MAKE_ME_SERIALIZABLE_1(addr)
    private:
        friend class mailbox_t;
        template<class a0_t>
        friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t) >::address_t, const a0_t&);
        raw_mailbox_t::address_t addr;
    };

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t) >::address_t, const a0_t&);
    static void write(std::ostream &stream, const arg0_t &arg0) {
        boost::archive::binary_oarchive archive(stream);
        archive << arg0;
    }
    static void on_message(std::istream &stream, const boost::function<void()> &done, const boost::function< void(arg0_t) > &fun) {
        arg0_t arg0;
        {
            boost::archive::binary_iarchive archive(stream);
        archive >> arg0;
        }
        done();
        fun(arg0);
    }

    raw_mailbox_t mailbox;
};

template<class arg0_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t) >::address_t dest, const arg0_t &arg0) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t) >::write, _1, arg0));
}

template<class arg0_t, class arg1_t>
class mailbox_t< void(arg0_t, arg1_t) > {

public:
    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t) > &fun) :
        mailbox(manager, boost::bind(&mailbox_t::on_message, _1, _2, fun))
        {
            rassert(fun);
        }

    ~mailbox_t() {
    }

    class address_t {
    public:
        bool is_nil() { return addr.is_nil(); }
        peer_id_t get_peer() { return addr.get_peer(); }
        RDB_MAKE_ME_SERIALIZABLE_1(addr)
    private:
        friend class mailbox_t;
        template<class a0_t, class a1_t>
        friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t) >::address_t, const a0_t&, const a1_t&);
        raw_mailbox_t::address_t addr;
    };

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t) >::address_t, const a0_t&, const a1_t&);
    static void write(std::ostream &stream, const arg0_t &arg0, const arg1_t &arg1) {
        boost::archive::binary_oarchive archive(stream);
        archive << arg0;
        archive << arg1;
    }
    static void on_message(std::istream &stream, const boost::function<void()> &done, const boost::function< void(arg0_t, arg1_t) > &fun) {
        arg0_t arg0;
        arg1_t arg1;
        {
            boost::archive::binary_iarchive archive(stream);
        archive >> arg0;
        archive >> arg1;
        }
        done();
        fun(arg0, arg1);
    }

    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t) >::write, _1, arg0, arg1));
}

template<class arg0_t, class arg1_t, class arg2_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t) > {

public:
    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t) > &fun) :
        mailbox(manager, boost::bind(&mailbox_t::on_message, _1, _2, fun))
        {
            rassert(fun);
        }

    ~mailbox_t() {
    }

    class address_t {
    public:
        bool is_nil() { return addr.is_nil(); }
        peer_id_t get_peer() { return addr.get_peer(); }
        RDB_MAKE_ME_SERIALIZABLE_1(addr)
    private:
        friend class mailbox_t;
        template<class a0_t, class a1_t, class a2_t>
        friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t) >::address_t, const a0_t&, const a1_t&, const a2_t&);
        raw_mailbox_t::address_t addr;
    };

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t) >::address_t, const a0_t&, const a1_t&, const a2_t&);
    static void write(std::ostream &stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2) {
        boost::archive::binary_oarchive archive(stream);
        archive << arg0;
        archive << arg1;
        archive << arg2;
    }
    static void on_message(std::istream &stream, const boost::function<void()> &done, const boost::function< void(arg0_t, arg1_t, arg2_t) > &fun) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        {
            boost::archive::binary_iarchive archive(stream);
        archive >> arg0;
        archive >> arg1;
        archive >> arg2;
        }
        done();
        fun(arg0, arg1, arg2);
    }

    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t) >::write, _1, arg0, arg1, arg2));
}

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t) > {

public:
    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t) > &fun) :
        mailbox(manager, boost::bind(&mailbox_t::on_message, _1, _2, fun))
        {
            rassert(fun);
        }

    ~mailbox_t() {
    }

    class address_t {
    public:
        bool is_nil() { return addr.is_nil(); }
        peer_id_t get_peer() { return addr.get_peer(); }
        RDB_MAKE_ME_SERIALIZABLE_1(addr)
    private:
        friend class mailbox_t;
        template<class a0_t, class a1_t, class a2_t, class a3_t>
        friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&);
        raw_mailbox_t::address_t addr;
    };

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&);
    static void write(std::ostream &stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3) {
        boost::archive::binary_oarchive archive(stream);
        archive << arg0;
        archive << arg1;
        archive << arg2;
        archive << arg3;
    }
    static void on_message(std::istream &stream, const boost::function<void()> &done, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t) > &fun) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        {
            boost::archive::binary_iarchive archive(stream);
        archive >> arg0;
        archive >> arg1;
        archive >> arg2;
        archive >> arg3;
        }
        done();
        fun(arg0, arg1, arg2, arg3);
    }

    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t) >::write, _1, arg0, arg1, arg2, arg3));
}

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t) > {

public:
    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t) > &fun) :
        mailbox(manager, boost::bind(&mailbox_t::on_message, _1, _2, fun))
        {
            rassert(fun);
        }

    ~mailbox_t() {
    }

    class address_t {
    public:
        bool is_nil() { return addr.is_nil(); }
        peer_id_t get_peer() { return addr.get_peer(); }
        RDB_MAKE_ME_SERIALIZABLE_1(addr)
    private:
        friend class mailbox_t;
        template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t>
        friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&);
        raw_mailbox_t::address_t addr;
    };

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&);
    static void write(std::ostream &stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4) {
        boost::archive::binary_oarchive archive(stream);
        archive << arg0;
        archive << arg1;
        archive << arg2;
        archive << arg3;
        archive << arg4;
    }
    static void on_message(std::istream &stream, const boost::function<void()> &done, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t) > &fun) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        {
            boost::archive::binary_iarchive archive(stream);
        archive >> arg0;
        archive >> arg1;
        archive >> arg2;
        archive >> arg3;
        archive >> arg4;
        }
        done();
        fun(arg0, arg1, arg2, arg3, arg4);
    }

    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t) >::write, _1, arg0, arg1, arg2, arg3, arg4));
}

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t) > {

public:
    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t) > &fun) :
        mailbox(manager, boost::bind(&mailbox_t::on_message, _1, _2, fun))
        {
            rassert(fun);
        }

    ~mailbox_t() {
    }

    class address_t {
    public:
        bool is_nil() { return addr.is_nil(); }
        peer_id_t get_peer() { return addr.get_peer(); }
        RDB_MAKE_ME_SERIALIZABLE_1(addr)
    private:
        friend class mailbox_t;
        template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t>
        friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&);
        raw_mailbox_t::address_t addr;
    };

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&);
    static void write(std::ostream &stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5) {
        boost::archive::binary_oarchive archive(stream);
        archive << arg0;
        archive << arg1;
        archive << arg2;
        archive << arg3;
        archive << arg4;
        archive << arg5;
    }
    static void on_message(std::istream &stream, const boost::function<void()> &done, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t) > &fun) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        {
            boost::archive::binary_iarchive archive(stream);
        archive >> arg0;
        archive >> arg1;
        archive >> arg2;
        archive >> arg3;
        archive >> arg4;
        archive >> arg5;
        }
        done();
        fun(arg0, arg1, arg2, arg3, arg4, arg5);
    }

    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t) >::write, _1, arg0, arg1, arg2, arg3, arg4, arg5));
}

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t) > {

public:
    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t) > &fun) :
        mailbox(manager, boost::bind(&mailbox_t::on_message, _1, _2, fun))
        {
            rassert(fun);
        }

    ~mailbox_t() {
    }

    class address_t {
    public:
        bool is_nil() { return addr.is_nil(); }
        peer_id_t get_peer() { return addr.get_peer(); }
        RDB_MAKE_ME_SERIALIZABLE_1(addr)
    private:
        friend class mailbox_t;
        template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t>
        friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&);
        raw_mailbox_t::address_t addr;
    };

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&);
    static void write(std::ostream &stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6) {
        boost::archive::binary_oarchive archive(stream);
        archive << arg0;
        archive << arg1;
        archive << arg2;
        archive << arg3;
        archive << arg4;
        archive << arg5;
        archive << arg6;
    }
    static void on_message(std::istream &stream, const boost::function<void()> &done, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t) > &fun) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        {
            boost::archive::binary_iarchive archive(stream);
        archive >> arg0;
        archive >> arg1;
        archive >> arg2;
        archive >> arg3;
        archive >> arg4;
        archive >> arg5;
        archive >> arg6;
        }
        done();
        fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }

    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t) >::write, _1, arg0, arg1, arg2, arg3, arg4, arg5, arg6));
}

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t) > {

public:
    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t) > &fun) :
        mailbox(manager, boost::bind(&mailbox_t::on_message, _1, _2, fun))
        {
            rassert(fun);
        }

    ~mailbox_t() {
    }

    class address_t {
    public:
        bool is_nil() { return addr.is_nil(); }
        peer_id_t get_peer() { return addr.get_peer(); }
        RDB_MAKE_ME_SERIALIZABLE_1(addr)
    private:
        friend class mailbox_t;
        template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t>
        friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&);
        raw_mailbox_t::address_t addr;
    };

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&);
    static void write(std::ostream &stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7) {
        boost::archive::binary_oarchive archive(stream);
        archive << arg0;
        archive << arg1;
        archive << arg2;
        archive << arg3;
        archive << arg4;
        archive << arg5;
        archive << arg6;
        archive << arg7;
    }
    static void on_message(std::istream &stream, const boost::function<void()> &done, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t) > &fun) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        arg7_t arg7;
        {
            boost::archive::binary_iarchive archive(stream);
        archive >> arg0;
        archive >> arg1;
        archive >> arg2;
        archive >> arg3;
        archive >> arg4;
        archive >> arg5;
        archive >> arg6;
        archive >> arg7;
        }
        done();
        fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }

    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t) >::write, _1, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
}

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t) > {

public:
    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t) > &fun) :
        mailbox(manager, boost::bind(&mailbox_t::on_message, _1, _2, fun))
        {
            rassert(fun);
        }

    ~mailbox_t() {
    }

    class address_t {
    public:
        bool is_nil() { return addr.is_nil(); }
        peer_id_t get_peer() { return addr.get_peer(); }
        RDB_MAKE_ME_SERIALIZABLE_1(addr)
    private:
        friend class mailbox_t;
        template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t>
        friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&);
        raw_mailbox_t::address_t addr;
    };

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&);
    static void write(std::ostream &stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8) {
        boost::archive::binary_oarchive archive(stream);
        archive << arg0;
        archive << arg1;
        archive << arg2;
        archive << arg3;
        archive << arg4;
        archive << arg5;
        archive << arg6;
        archive << arg7;
        archive << arg8;
    }
    static void on_message(std::istream &stream, const boost::function<void()> &done, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t) > &fun) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        arg7_t arg7;
        arg8_t arg8;
        {
            boost::archive::binary_iarchive archive(stream);
        archive >> arg0;
        archive >> arg1;
        archive >> arg2;
        archive >> arg3;
        archive >> arg4;
        archive >> arg5;
        archive >> arg6;
        archive >> arg7;
        archive >> arg8;
        }
        done();
        fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }

    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t) >::write, _1, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8));
}

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t) > {

public:
    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t) > &fun) :
        mailbox(manager, boost::bind(&mailbox_t::on_message, _1, _2, fun))
        {
            rassert(fun);
        }

    ~mailbox_t() {
    }

    class address_t {
    public:
        bool is_nil() { return addr.is_nil(); }
        peer_id_t get_peer() { return addr.get_peer(); }
        RDB_MAKE_ME_SERIALIZABLE_1(addr)
    private:
        friend class mailbox_t;
        template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t>
        friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&);
        raw_mailbox_t::address_t addr;
    };

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&);
    static void write(std::ostream &stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9) {
        boost::archive::binary_oarchive archive(stream);
        archive << arg0;
        archive << arg1;
        archive << arg2;
        archive << arg3;
        archive << arg4;
        archive << arg5;
        archive << arg6;
        archive << arg7;
        archive << arg8;
        archive << arg9;
    }
    static void on_message(std::istream &stream, const boost::function<void()> &done, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t) > &fun) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        arg7_t arg7;
        arg8_t arg8;
        arg9_t arg9;
        {
            boost::archive::binary_iarchive archive(stream);
        archive >> arg0;
        archive >> arg1;
        archive >> arg2;
        archive >> arg3;
        archive >> arg4;
        archive >> arg5;
        archive >> arg6;
        archive >> arg7;
        archive >> arg8;
        archive >> arg9;
        }
        done();
        fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    }

    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t) >::write, _1, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9));
}

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t) > {

public:
    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t) > &fun) :
        mailbox(manager, boost::bind(&mailbox_t::on_message, _1, _2, fun))
        {
            rassert(fun);
        }

    ~mailbox_t() {
    }

    class address_t {
    public:
        bool is_nil() { return addr.is_nil(); }
        peer_id_t get_peer() { return addr.get_peer(); }
        RDB_MAKE_ME_SERIALIZABLE_1(addr)
    private:
        friend class mailbox_t;
        template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t>
        friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&);
        raw_mailbox_t::address_t addr;
    };

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&);
    static void write(std::ostream &stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10) {
        boost::archive::binary_oarchive archive(stream);
        archive << arg0;
        archive << arg1;
        archive << arg2;
        archive << arg3;
        archive << arg4;
        archive << arg5;
        archive << arg6;
        archive << arg7;
        archive << arg8;
        archive << arg9;
        archive << arg10;
    }
    static void on_message(std::istream &stream, const boost::function<void()> &done, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t) > &fun) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        arg7_t arg7;
        arg8_t arg8;
        arg9_t arg9;
        arg10_t arg10;
        {
            boost::archive::binary_iarchive archive(stream);
        archive >> arg0;
        archive >> arg1;
        archive >> arg2;
        archive >> arg3;
        archive >> arg4;
        archive >> arg5;
        archive >> arg6;
        archive >> arg7;
        archive >> arg8;
        archive >> arg9;
        archive >> arg10;
        }
        done();
        fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    }

    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t) >::write, _1, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10));
}

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t, class arg11_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t) > {

public:
    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t) > &fun) :
        mailbox(manager, boost::bind(&mailbox_t::on_message, _1, _2, fun))
        {
            rassert(fun);
        }

    ~mailbox_t() {
    }

    class address_t {
    public:
        bool is_nil() { return addr.is_nil(); }
        peer_id_t get_peer() { return addr.get_peer(); }
        RDB_MAKE_ME_SERIALIZABLE_1(addr)
    private:
        friend class mailbox_t;
        template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t, class a11_t>
        friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t, a11_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&, const a11_t&);
        raw_mailbox_t::address_t addr;
    };

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t, class a11_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t, a11_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&, const a11_t&);
    static void write(std::ostream &stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10, const arg11_t &arg11) {
        boost::archive::binary_oarchive archive(stream);
        archive << arg0;
        archive << arg1;
        archive << arg2;
        archive << arg3;
        archive << arg4;
        archive << arg5;
        archive << arg6;
        archive << arg7;
        archive << arg8;
        archive << arg9;
        archive << arg10;
        archive << arg11;
    }
    static void on_message(std::istream &stream, const boost::function<void()> &done, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t) > &fun) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        arg7_t arg7;
        arg8_t arg8;
        arg9_t arg9;
        arg10_t arg10;
        arg11_t arg11;
        {
            boost::archive::binary_iarchive archive(stream);
        archive >> arg0;
        archive >> arg1;
        archive >> arg2;
        archive >> arg3;
        archive >> arg4;
        archive >> arg5;
        archive >> arg6;
        archive >> arg7;
        archive >> arg8;
        archive >> arg9;
        archive >> arg10;
        archive >> arg11;
        }
        done();
        fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    }

    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t, class arg11_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10, const arg11_t &arg11) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t) >::write, _1, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11));
}

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t, class arg11_t, class arg12_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t) > {

public:
    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t) > &fun) :
        mailbox(manager, boost::bind(&mailbox_t::on_message, _1, _2, fun))
        {
            rassert(fun);
        }

    ~mailbox_t() {
    }

    class address_t {
    public:
        bool is_nil() { return addr.is_nil(); }
        peer_id_t get_peer() { return addr.get_peer(); }
        RDB_MAKE_ME_SERIALIZABLE_1(addr)
    private:
        friend class mailbox_t;
        template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t, class a11_t, class a12_t>
        friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t, a11_t, a12_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&, const a11_t&, const a12_t&);
        raw_mailbox_t::address_t addr;
    };

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t, class a11_t, class a12_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t, a11_t, a12_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&, const a11_t&, const a12_t&);
    static void write(std::ostream &stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10, const arg11_t &arg11, const arg12_t &arg12) {
        boost::archive::binary_oarchive archive(stream);
        archive << arg0;
        archive << arg1;
        archive << arg2;
        archive << arg3;
        archive << arg4;
        archive << arg5;
        archive << arg6;
        archive << arg7;
        archive << arg8;
        archive << arg9;
        archive << arg10;
        archive << arg11;
        archive << arg12;
    }
    static void on_message(std::istream &stream, const boost::function<void()> &done, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t) > &fun) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        arg7_t arg7;
        arg8_t arg8;
        arg9_t arg9;
        arg10_t arg10;
        arg11_t arg11;
        arg12_t arg12;
        {
            boost::archive::binary_iarchive archive(stream);
        archive >> arg0;
        archive >> arg1;
        archive >> arg2;
        archive >> arg3;
        archive >> arg4;
        archive >> arg5;
        archive >> arg6;
        archive >> arg7;
        archive >> arg8;
        archive >> arg9;
        archive >> arg10;
        archive >> arg11;
        archive >> arg12;
        }
        done();
        fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    }

    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t, class arg11_t, class arg12_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10, const arg11_t &arg11, const arg12_t &arg12) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t) >::write, _1, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12));
}

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t, class arg11_t, class arg12_t, class arg13_t>
class mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t, arg13_t) > {

public:
    mailbox_t(mailbox_manager_t *manager, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t, arg13_t) > &fun) :
        mailbox(manager, boost::bind(&mailbox_t::on_message, _1, _2, fun))
        {
            rassert(fun);
        }

    ~mailbox_t() {
    }

    class address_t {
    public:
        bool is_nil() { return addr.is_nil(); }
        peer_id_t get_peer() { return addr.get_peer(); }
        RDB_MAKE_ME_SERIALIZABLE_1(addr)
    private:
        friend class mailbox_t;
        template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t, class a11_t, class a12_t, class a13_t>
        friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t, a11_t, a12_t, a13_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&, const a11_t&, const a12_t&, const a13_t&);
        raw_mailbox_t::address_t addr;
    };

    address_t get_address() {
        address_t a;
        a.addr = mailbox.get_address();
        return a;
    }

private:
    template<class a0_t, class a1_t, class a2_t, class a3_t, class a4_t, class a5_t, class a6_t, class a7_t, class a8_t, class a9_t, class a10_t, class a11_t, class a12_t, class a13_t>
    friend void send(mailbox_manager_t*, typename mailbox_t< void(a0_t, a1_t, a2_t, a3_t, a4_t, a5_t, a6_t, a7_t, a8_t, a9_t, a10_t, a11_t, a12_t, a13_t) >::address_t, const a0_t&, const a1_t&, const a2_t&, const a3_t&, const a4_t&, const a5_t&, const a6_t&, const a7_t&, const a8_t&, const a9_t&, const a10_t&, const a11_t&, const a12_t&, const a13_t&);
    static void write(std::ostream &stream, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10, const arg11_t &arg11, const arg12_t &arg12, const arg13_t &arg13) {
        boost::archive::binary_oarchive archive(stream);
        archive << arg0;
        archive << arg1;
        archive << arg2;
        archive << arg3;
        archive << arg4;
        archive << arg5;
        archive << arg6;
        archive << arg7;
        archive << arg8;
        archive << arg9;
        archive << arg10;
        archive << arg11;
        archive << arg12;
        archive << arg13;
    }
    static void on_message(std::istream &stream, const boost::function<void()> &done, const boost::function< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t, arg13_t) > &fun) {
        arg0_t arg0;
        arg1_t arg1;
        arg2_t arg2;
        arg3_t arg3;
        arg4_t arg4;
        arg5_t arg5;
        arg6_t arg6;
        arg7_t arg7;
        arg8_t arg8;
        arg9_t arg9;
        arg10_t arg10;
        arg11_t arg11;
        arg12_t arg12;
        arg13_t arg13;
        {
            boost::archive::binary_iarchive archive(stream);
        archive >> arg0;
        archive >> arg1;
        archive >> arg2;
        archive >> arg3;
        archive >> arg4;
        archive >> arg5;
        archive >> arg6;
        archive >> arg7;
        archive >> arg8;
        archive >> arg9;
        archive >> arg10;
        archive >> arg11;
        archive >> arg12;
        archive >> arg13;
        }
        done();
        fun(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    }

    raw_mailbox_t mailbox;
};

template<class arg0_t, class arg1_t, class arg2_t, class arg3_t, class arg4_t, class arg5_t, class arg6_t, class arg7_t, class arg8_t, class arg9_t, class arg10_t, class arg11_t, class arg12_t, class arg13_t>
void send(mailbox_manager_t *src, typename mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t, arg13_t) >::address_t dest, const arg0_t &arg0, const arg1_t &arg1, const arg2_t &arg2, const arg3_t &arg3, const arg4_t &arg4, const arg5_t &arg5, const arg6_t &arg6, const arg7_t &arg7, const arg8_t &arg8, const arg9_t &arg9, const arg10_t &arg10, const arg11_t &arg11, const arg12_t &arg12, const arg13_t &arg13) {
    send(src, dest.addr,
        boost::bind(&mailbox_t< void(arg0_t, arg1_t, arg2_t, arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, arg8_t, arg9_t, arg10_t, arg11_t, arg12_t, arg13_t) >::write, _1, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13));
}

#endif /* __RPC_MAILBOX_TYPED_HPP__ */
