message TableRef {
    required string db_name    = 1;
    required string table_name = 2;
    optional bool use_outdated  = 3 [default = false]; //Use and outdated version of this table
};

message MetaQuery3 {
    enum MetaQueryType {
        CREATE_DB     = 1; //db_name
        DROP_DB       = 2; //db_name
        LIST_DBS      = 3;

        CREATE_TABLE  = 4;
        DROP_TABLE    = 5;
        LIST_TABLES   = 6; //db_name
    };
    required MetaQueryType type = 1;
    optional string db_name = 2;

    message CreateTable {
        optional string datacenter  = 1;
        required TableRef table_ref = 3;
        optional string primary_key = 4 [default = "id"];
        optional int64 cache_size = 5 [default = 1073741824]; //notice that's a gigabyte right there.
    }
    optional CreateTable create_table = 3;

    optional TableRef drop_table = 4;
};

message Query3 {
    enum QueryType {
        CONTINUE   = 3; //Continue reading from a stream
        STOP       = 4; //Stop reading from a stream and release its resources
        META       = 5; //Meta operations that create, drop, or list databases/tables
    }

    required QueryType type = 1;

    required int64 token = 2;

    optional MetaQuery3 meta_query = 5;
}

message Response3 {
    enum StatusCode {
        SUCCESS_EMPTY = 0;
        SUCCESS_JSON = 1;
        SUCCESS_PARTIAL = 2; //need to send CONTINUE repeatedly until SUCCESS_STREAM
        SUCCESS_STREAM = 3;

        BROKEN_CLIENT = 101; // Means the client is misbehaving, not the user
        BAD_QUERY = 102;
        RUNTIME_ERROR = 103;
    }
    required StatusCode status_code = 1;

    required int64 token = 2;

    repeated string response = 3;

    optional string error_message = 4;

    message Backtrace {
        repeated string frame = 1;
    };

    optional Backtrace backtrace = 5;
}
