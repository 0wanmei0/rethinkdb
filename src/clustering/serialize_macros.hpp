#ifndef __CLUSTERING_SERIALIZE_MACROS_HPP__
#define __CLUSTERING_SERIALIZE_MACROS_HPP__

/* This file is automatically generated by '../scripts/generate_serialize_macros.py'.
Please modify '../scripts/generate_serialize_macros.py' instead of modifying this file.*/

#include "clustering/serialize.hpp"

/* The purpose of these macros is to make it easier to serialize and
unserialize data types that consist of a simple series of fields, each of which
is serializable. Suppose we have a type "struct point_t { int x, y; }" that we
want to be able to serialize. To make it serializable automatically, either
write RDB_MAKE_SERIALIZABLE_2(point_t, x, y) at the global scope or write
RDB_MAKE_ME_SERIALIZABLE(point_t, x, y) within the body of the point_t type.
The reason for the second form is to make it possible to serialize template
types. There is at present no non-intrusive way to use these macros to
serialize template types; this is less-than-ideal, but not worth fixing right
now.

A note about "dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body": It's wrong
to invoke RDB_MAKE_SERIALIZABLE_*() within the body of a class. You should use
RDB_MAKE_ME_SERIALIZABLE_*() instead. In order to force the compiler to catch
this error, we declare a dummy "extern int" in RDB_MAKE_ME_SERIALIZABLE_*().
This is a noop at the global scope, but produces a (somewhat weird) error in
the class scope. */

#define RDB_MAKE_SERIALIZABLE_0(type_t) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_0(type_t) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
    }

#define RDB_MAKE_SERIALIZABLE_1(type_t, field1) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_1(type_t, field1) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
    }

#define RDB_MAKE_SERIALIZABLE_2(type_t, field1, field2) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_2(type_t, field1, field2) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
    }

#define RDB_MAKE_SERIALIZABLE_3(type_t, field1, field2, field3) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_3(type_t, field1, field2, field3) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
    }

#define RDB_MAKE_SERIALIZABLE_4(type_t, field1, field2, field3, field4) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_4(type_t, field1, field2, field3, field4) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
    }

#define RDB_MAKE_SERIALIZABLE_5(type_t, field1, field2, field3, field4, field5) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_5(type_t, field1, field2, field3, field4, field5) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
    }

#define RDB_MAKE_SERIALIZABLE_6(type_t, field1, field2, field3, field4, field5, field6) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_6(type_t, field1, field2, field3, field4, field5, field6) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
    }

#define RDB_MAKE_SERIALIZABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
    }

#define RDB_MAKE_SERIALIZABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
    }

#define RDB_MAKE_SERIALIZABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
    }

#define RDB_MAKE_SERIALIZABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
    }

#define RDB_MAKE_SERIALIZABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
    }

#define RDB_MAKE_SERIALIZABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
    }

#define RDB_MAKE_SERIALIZABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
        ::serialize(pipe, m.field13); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        total += ::ser_size(m.field13); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
        ::unserialize(pipe, &m->field13); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
        ::serialize(pipe, m.field13); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        total += ::ser_size(m.field13); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
        ::unserialize(pipe, &m->field13); \
    }

#define RDB_MAKE_SERIALIZABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
        ::serialize(pipe, m.field13); \
        ::serialize(pipe, m.field14); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        total += ::ser_size(m.field13); \
        total += ::ser_size(m.field14); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
        ::unserialize(pipe, &m->field13); \
        ::unserialize(pipe, &m->field14); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
        ::serialize(pipe, m.field13); \
        ::serialize(pipe, m.field14); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        total += ::ser_size(m.field13); \
        total += ::ser_size(m.field14); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
        ::unserialize(pipe, &m->field13); \
        ::unserialize(pipe, &m->field14); \
    }

#define RDB_MAKE_SERIALIZABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
        ::serialize(pipe, m.field13); \
        ::serialize(pipe, m.field14); \
        ::serialize(pipe, m.field15); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        total += ::ser_size(m.field13); \
        total += ::ser_size(m.field14); \
        total += ::ser_size(m.field15); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
        ::unserialize(pipe, &m->field13); \
        ::unserialize(pipe, &m->field14); \
        ::unserialize(pipe, &m->field15); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
        ::serialize(pipe, m.field13); \
        ::serialize(pipe, m.field14); \
        ::serialize(pipe, m.field15); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        total += ::ser_size(m.field13); \
        total += ::ser_size(m.field14); \
        total += ::ser_size(m.field15); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
        ::unserialize(pipe, &m->field13); \
        ::unserialize(pipe, &m->field14); \
        ::unserialize(pipe, &m->field15); \
    }

#define RDB_MAKE_SERIALIZABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
        ::serialize(pipe, m.field13); \
        ::serialize(pipe, m.field14); \
        ::serialize(pipe, m.field15); \
        ::serialize(pipe, m.field16); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        total += ::ser_size(m.field13); \
        total += ::ser_size(m.field14); \
        total += ::ser_size(m.field15); \
        total += ::ser_size(m.field16); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
        ::unserialize(pipe, &m->field13); \
        ::unserialize(pipe, &m->field14); \
        ::unserialize(pipe, &m->field15); \
        ::unserialize(pipe, &m->field16); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
        ::serialize(pipe, m.field13); \
        ::serialize(pipe, m.field14); \
        ::serialize(pipe, m.field15); \
        ::serialize(pipe, m.field16); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        total += ::ser_size(m.field13); \
        total += ::ser_size(m.field14); \
        total += ::ser_size(m.field15); \
        total += ::ser_size(m.field16); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
        ::unserialize(pipe, &m->field13); \
        ::unserialize(pipe, &m->field14); \
        ::unserialize(pipe, &m->field15); \
        ::unserialize(pipe, &m->field16); \
    }

#define RDB_MAKE_SERIALIZABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
        ::serialize(pipe, m.field13); \
        ::serialize(pipe, m.field14); \
        ::serialize(pipe, m.field15); \
        ::serialize(pipe, m.field16); \
        ::serialize(pipe, m.field17); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        total += ::ser_size(m.field13); \
        total += ::ser_size(m.field14); \
        total += ::ser_size(m.field15); \
        total += ::ser_size(m.field16); \
        total += ::ser_size(m.field17); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
        ::unserialize(pipe, &m->field13); \
        ::unserialize(pipe, &m->field14); \
        ::unserialize(pipe, &m->field15); \
        ::unserialize(pipe, &m->field16); \
        ::unserialize(pipe, &m->field17); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
        ::serialize(pipe, m.field13); \
        ::serialize(pipe, m.field14); \
        ::serialize(pipe, m.field15); \
        ::serialize(pipe, m.field16); \
        ::serialize(pipe, m.field17); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        total += ::ser_size(m.field13); \
        total += ::ser_size(m.field14); \
        total += ::ser_size(m.field15); \
        total += ::ser_size(m.field16); \
        total += ::ser_size(m.field17); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
        ::unserialize(pipe, &m->field13); \
        ::unserialize(pipe, &m->field14); \
        ::unserialize(pipe, &m->field15); \
        ::unserialize(pipe, &m->field16); \
        ::unserialize(pipe, &m->field17); \
    }

#define RDB_MAKE_SERIALIZABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
        ::serialize(pipe, m.field13); \
        ::serialize(pipe, m.field14); \
        ::serialize(pipe, m.field15); \
        ::serialize(pipe, m.field16); \
        ::serialize(pipe, m.field17); \
        ::serialize(pipe, m.field18); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        total += ::ser_size(m.field13); \
        total += ::ser_size(m.field14); \
        total += ::ser_size(m.field15); \
        total += ::ser_size(m.field16); \
        total += ::ser_size(m.field17); \
        total += ::ser_size(m.field18); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
        ::unserialize(pipe, &m->field13); \
        ::unserialize(pipe, &m->field14); \
        ::unserialize(pipe, &m->field15); \
        ::unserialize(pipe, &m->field16); \
        ::unserialize(pipe, &m->field17); \
        ::unserialize(pipe, &m->field18); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
        ::serialize(pipe, m.field13); \
        ::serialize(pipe, m.field14); \
        ::serialize(pipe, m.field15); \
        ::serialize(pipe, m.field16); \
        ::serialize(pipe, m.field17); \
        ::serialize(pipe, m.field18); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        total += ::ser_size(m.field13); \
        total += ::ser_size(m.field14); \
        total += ::ser_size(m.field15); \
        total += ::ser_size(m.field16); \
        total += ::ser_size(m.field17); \
        total += ::ser_size(m.field18); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
        ::unserialize(pipe, &m->field13); \
        ::unserialize(pipe, &m->field14); \
        ::unserialize(pipe, &m->field15); \
        ::unserialize(pipe, &m->field16); \
        ::unserialize(pipe, &m->field17); \
        ::unserialize(pipe, &m->field18); \
    }

#define RDB_MAKE_SERIALIZABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
        ::serialize(pipe, m.field13); \
        ::serialize(pipe, m.field14); \
        ::serialize(pipe, m.field15); \
        ::serialize(pipe, m.field16); \
        ::serialize(pipe, m.field17); \
        ::serialize(pipe, m.field18); \
        ::serialize(pipe, m.field19); \
    } \
    int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        total += ::ser_size(m.field13); \
        total += ::ser_size(m.field14); \
        total += ::ser_size(m.field15); \
        total += ::ser_size(m.field16); \
        total += ::ser_size(m.field17); \
        total += ::ser_size(m.field18); \
        total += ::ser_size(m.field19); \
        return total; \
    } \
    void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
        ::unserialize(pipe, &m->field13); \
        ::unserialize(pipe, &m->field14); \
        ::unserialize(pipe, &m->field15); \
        ::unserialize(pipe, &m->field16); \
        ::unserialize(pipe, &m->field17); \
        ::unserialize(pipe, &m->field18); \
        ::unserialize(pipe, &m->field19); \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body;
#define RDB_MAKE_ME_SERIALIZABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    static void serialize(cluster_outpipe_t *pipe, const type_t &m) { \
        ::serialize(pipe, m.field1); \
        ::serialize(pipe, m.field2); \
        ::serialize(pipe, m.field3); \
        ::serialize(pipe, m.field4); \
        ::serialize(pipe, m.field5); \
        ::serialize(pipe, m.field6); \
        ::serialize(pipe, m.field7); \
        ::serialize(pipe, m.field8); \
        ::serialize(pipe, m.field9); \
        ::serialize(pipe, m.field10); \
        ::serialize(pipe, m.field11); \
        ::serialize(pipe, m.field12); \
        ::serialize(pipe, m.field13); \
        ::serialize(pipe, m.field14); \
        ::serialize(pipe, m.field15); \
        ::serialize(pipe, m.field16); \
        ::serialize(pipe, m.field17); \
        ::serialize(pipe, m.field18); \
        ::serialize(pipe, m.field19); \
    } \
    static int ser_size(const type_t &m) { \
        int total = 0; \
        total += ::ser_size(m.field1); \
        total += ::ser_size(m.field2); \
        total += ::ser_size(m.field3); \
        total += ::ser_size(m.field4); \
        total += ::ser_size(m.field5); \
        total += ::ser_size(m.field6); \
        total += ::ser_size(m.field7); \
        total += ::ser_size(m.field8); \
        total += ::ser_size(m.field9); \
        total += ::ser_size(m.field10); \
        total += ::ser_size(m.field11); \
        total += ::ser_size(m.field12); \
        total += ::ser_size(m.field13); \
        total += ::ser_size(m.field14); \
        total += ::ser_size(m.field15); \
        total += ::ser_size(m.field16); \
        total += ::ser_size(m.field17); \
        total += ::ser_size(m.field18); \
        total += ::ser_size(m.field19); \
        return total; \
    } \
    static void unserialize(cluster_inpipe_t *pipe, type_t *m) { \
        ::unserialize(pipe, &m->field1); \
        ::unserialize(pipe, &m->field2); \
        ::unserialize(pipe, &m->field3); \
        ::unserialize(pipe, &m->field4); \
        ::unserialize(pipe, &m->field5); \
        ::unserialize(pipe, &m->field6); \
        ::unserialize(pipe, &m->field7); \
        ::unserialize(pipe, &m->field8); \
        ::unserialize(pipe, &m->field9); \
        ::unserialize(pipe, &m->field10); \
        ::unserialize(pipe, &m->field11); \
        ::unserialize(pipe, &m->field12); \
        ::unserialize(pipe, &m->field13); \
        ::unserialize(pipe, &m->field14); \
        ::unserialize(pipe, &m->field15); \
        ::unserialize(pipe, &m->field16); \
        ::unserialize(pipe, &m->field17); \
        ::unserialize(pipe, &m->field18); \
        ::unserialize(pipe, &m->field19); \
    }

#endif /* __CLUSTERING_SERIALIZE_MACROS_HPP__ */
