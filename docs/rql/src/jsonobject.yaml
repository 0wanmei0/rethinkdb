sections:
  - tag: jsonobject
    name: Document Manipulation
    description: These commands manipulate JSON objects and documents
    order: 9

commands:
  - tag: row
    section: jsonobject
    description: Returns the currently visited document.

    body: "$PARENT.row"

    io:
      - - r
        - value 

    examples:
      - description: Get all users whose age is greater than 5.
        code:
          js: r.table('users').filter(r.row('age').gt(5)).run(conn, callback)
          py: r.table('users').filter(r.row['age'] > 5).run(conn)
      - description: Accessing the attribute 'child' of an embedded document.
        code:
          js: r.table('users').filter(r.row('embedded_doc')('child') > 5).run(conn, callback)
          py: r.table('users').filter(r.row['embedded_doc']['child'] > 5).run(conn)
      - description: Add 1 to every element of an array.
        code:
          js: r.expr([1, 2, 3]).map(r.row.add(1)).run(conn, callback)
          py: r.expr([1, 2, 3]).map(r.row + 1).run(conn)
      - description: For nested queries functions should be used instead of r.row.
        code:
          js: |-
            r.table('users').filter(function(doc) {
                return doc('name').eq(r.table('prizes').get('winner'))
            }).run(conn, callback)
          py: |-
            r.table('users').filter(
                lambda doc: doc['name'] == r.table('prizes').get('winner')).run(conn)

    rb: false

  - tag: pluck
    section: jsonobject
    description: Plucks out one or more attributes from either an object or a sequence
      of objects (projection).

    body: "$PARENT.pluck([selector1, selector2...])"

    io:
      - - sequence
        - stream
      - - array
        - array
      - - object
        - object
      - - singleSelection
        - object

    examples:
      - description: We just need information about IronMan's reactor and not the rest of the document.
        code:
          py: r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn)
          rb: r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn)
          js: r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn, callback)
      - description: For the hero beauty contest we only care about certain qualities.
        code:
          py: r.table('marvel').pluck('beauty', 'muscleTone', 'charm').run(conn)
          rb: r.table('marvel').pluck('beauty', 'muscleTone', 'charm').run(conn)
          js: r.table('marvel').pluck('beauty', 'muscleTone', 'charm').run(conn, callback)
      - description: Pluck can also be used on nested objects.
        code:
          py: "r.table('marvel').pluck({'abilities' : {'damage' : True, 'mana_cost' : True}, 'weapons' : True}).run(conn)"
          rb: "r.table('marvel').pluck({:abilities => {:damage => true, :mana_cost => true}, :weapons => true}).run(conn)"
          js: "r.table('marvel').pluck({'abilities' : {'damage' : true, 'mana_cost' : true}, 'weapons' : true}).run(conn, callback)"
      - description: The nested syntax can quickly become overly verbose so there's a shorthand for it.
        code:
          py: "r.table('marvel').pluck({'abilities' : ['damage', 'mana_cost']}, 'weapons').run(conn)"
          rb: "r.table('marvel').pluck({:abilities => [:damage, :mana_cost]}, :weapons).run(conn)"
          js: "r.table('marvel').pluck({'abilities' : ['damage', 'mana_cost']}, 'weapons').run(conn, callback)"

  - tag: without
    section: jsonobject
    description: The opposite of pluck; takes an object or a sequence of objects,
      and removes all attributes except for the ones specified.

    body: "$PARENT.without(attr1[, attr2...])"

    io:
      - - sequence
        - stream
      - - array
        - array
      - - singleSelection
        - object
      - - object
        - object


    examples:
      - description: Since we don't need it for this computation we'll save bandwidth
          and leave out the list of IronMan's romantic conquests.
        code:
          py: r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn)
          rb: r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn)
          js: r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn, callback)
      - description: Without their prized weapons, our enemies will quickly be vanquished.
        code:
          py: r.table('enemies').without('weapons').run(conn)
          rb: r.table('enemies').without('weapons').run(conn)
          js: r.table('enemies').without('weapons').run(conn, callback)

  - tag: merge
    section: jsonobject
    description: Merge two objects together to construct a new object with properties
      from both. Gives preference to attributes from other when there is a conflict.

    body: "$PARENT.merge(object)"

    io:
      - - singleSelection
        - object
      - - object
        - object
      - - sequence
        - stream
      - - array
        - array

    examples:
      - description: Equip IronMan for battle.
        code:
          py: |-
            r.table('marvel').get('IronMan').merge(
              r.table('loadouts').get('alienInvasionKit')).run(conn)
          rb: |-
            r.table('marvel').get('IronMan').merge(
              r.table('loadouts').get('alienInvasionKit')).run(conn)
          js: |-
            r.table('marvel').get('IronMan').merge(
              r.table('loadouts').get('alienInvasionKit')).run(conn, callback)

  - tag: append
    section: jsonobject
    description: Append a value to an array.

    body: "$PARENT.append(value)"

    io:
      - - array
        - array

    examples:
      - description: Retrieve Iron Man's equipment list with the addition of some new boots.
        code:
          js: r.table('marvel').get('IronMan')('equipment').append('newBoots').run(conn, callback)
          py: r.table('marvel').get('IronMan')['equipment'].append('newBoots').run(conn)
          rb: r.table('marvel').get('IronMan')[:equipment].append('new_boots').run(conn)

  - tag: prepend
    section: jsonobject
    description: Prepend a value to an array.

    body: "$PARENT.prepend(value)"

    io:
      - - array
        - array

    examples:
      - description: Retrieve Iron Man's equipment list with the addition of some new boots.
        code:
          js: r.table('marvel').get('IronMan')('equipment').prepend('newBoots').run(conn, callback)
          py: r.table('marvel').get('IronMan')['equipment'].prepend('newBoots').run(conn)
          rb: r.table('marvel').get('IronMan')[:equipment].prepend('new_boots').run(conn)

  - tag: difference
    section: jsonobject
    description: Remove the elements of one array from another array.

    body: "$PARENT.difference(array)"

    io:
      - - array
        - array

    examples:
      - description: Retrieve Iron Man's equipment list without boots.
        code:
          js: r.table('marvel').get('IronMan')('equipment').difference(['Boots']).run(conn, callback)
          py: r.table('marvel').get('IronMan')['equipment'].difference(['Boots']).run(conn)
          rb: r.table('marvel').get('IronMan')[:equipment].difference(['Boots']).run(conn)

  - tag: set_insert
    section: jsonobject
    description: |
      Add a value to an <code>array</code> and return it as a <code>set</code>
      (an <code>array</code> with distinct values).

    name:
      js: setInsert
      py: set_insert
      rb: set_insert

    body:
      py: "$PARENT.set_insert(value)"
      rb: "$PARENT.set_insert(value)"
      js: "$PARENT.setInsert(value)"

    io:
      - - array
        - array

    examples:
      - description: Retrieve Iron Man's equipment list with the addition of some new boots.
        code:
          js: r.table('marvel').get('IronMan')('equipment').setInsert('newBoots').run(conn, callback)
          py: r.table('marvel').get('IronMan')['equipment'].set_insert('newBoots').run(conn)
          rb: r.table('marvel').get('IronMan')[:equipment].set_insert('new_boots').run(conn)

  - tag: set_union
    section: jsonobject
    description: |
      Add a several values to an <code>array</code> and return it as a
      <code>set</code> (an <code>array</code> with distinct values).

    name:
      js: setUnion
      rb: set_union
      py: set_union

    body:
      py: "$PARENT.set_union(array)"
      rb: "$PARENT.set_union(array)"
      js: "$PARENT.setUnion(array)"

    io:
      - - array
        - array

    examples:
      - description: |
          Retrieve Iron Man's equipment list with the addition of some new
          boots and an arc reactor.
        code:
          js: r.table('marvel').get('IronMan')('equipment').setUnion(['newBoots', 'arc_reactor']).run(conn, callback)
          py: r.table('marvel').get('IronMan')['equipment'].set_union(['newBoots', 'arc_reactor']).run(conn)
          rb: r.table('marvel').get('IronMan')[:equipment].set_union(['newBoots', 'arc_reactor']).run(conn)

  - tag: set_intersection
    section: jsonobject
    description: |
      Intersect two <code>arrays</code> returning values that occur in both of
      them as a <code>set</code> (an <code>array</code> with distinct values).

    name:
      js: setIntersection
      py: set_intersection
      rb: set_intersection

    body:
      py: "$PARENT.set_intersection(array)"
      js: "$PARENT.set_intersection(array)"
      rb: "$PARENT.setIntersection(array)"

    io:
      - - array
        - array

    examples:
      - description: Check which pieces of equipment Iron Man has from a fixed list.
        code:
          js: r.table('marvel').get('IronMan')('equipment').setIntersection(['newBoots', 'arc_reactor']).run(conn, callback)
          py: r.table('marvel').get('IronMan')['equipment'].set_intersection(['newBoots', 'arc_reactor']).run(conn)
          rb: r.table('marvel').get('IronMan')[:equipment].set_intersection(['newBoots', 'arc_reactor']).run(conn)

  - tag: set_difference
    section: jsonobject
    description: |
      Remove the elements of one array from another and return them as a
      <code>set</code> (an <code>array</code> with distinct values).

    name:
      js: setDifference
      py: set_difference
      rb: set_difference

    body:
      js: "$PARENT.setDifference(array)"
      py: "$PARENT.set_difference(array)"
      rb: "$PARENT.set_difference(array)"

    io:
      - - array
        - array

    examples:
      - description: Check which pieces of equipment Iron Man has, excluding a fixed list.
        code:
          js: r.table('marvel').get('IronMan')('equipment').setDifference(['newBoots', 'arc_reactor']).run(conn, callback)
          py: r.table('marvel').get('IronMan')['equipment'].set_difference(['newBoots', 'arc_reactor']).run(conn)
          rb: r.table('marvel').get('IronMan')[:equipment].set_difference(['newBoots', 'arc_reactor']).run(conn)

  - tag: get_field
    section: jsonobject
    description: Get a single field from an object.  If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.

    name:
      js: "()"
      py: "[]"
      rb: "[]"

    body:
      js: "$PARENT(attr)"
      py: "$PARENT[attr]"
      rb: "$PARENT[attr]"

    io:
      - - sequence
        - sequence
      - - singleSelection 
        - value
      - - object
        - value

    examples:
      - description: What was Iron Man's first appearance in a comic?
        code:
          py: r.table('marvel').get('IronMan')['firstAppearance'].run(conn)
          js: r.table('marvel').get('IronMan')('firstAppearance').run(conn, callback)
          rb: r.table('marvel').get('IronMan')[:first_appearance].run(conn)

  - tag: has_fields
    section: jsonobject
    description: Test if an object has all of the specified fields.  An object has a field if it has the specified key and that key maps to a non-null value.  For instance, the object `{'a':1,'b':2,'c':null}` has the fields `a` and `b`.

    name:
      js: hasFields
      py: has_fields
      rb: has_fields

    body:
      js: "$PARENT.hasFields(field1[, field2...])"
      py: "$PARENT.has_fields(field1[, field2...])"
      rb: "$PARENT.has_fields(field1[, field2...])"

    io:
      - - sequence
        - stream
      - - array
        - array
      - - singleSelection
        - boolean
      - - object
        - boolean

    examples:
      - description: Which heroes are married?
        code:
          js: |
            r.table('marvel').filter(function(hero) {return hero.hasFields('spouse')})
             .run(conn, callback)
          py: "r.table('marvel').filter(lambda hero: hero.has_fields('spouse')).run(conn)"
          rb: r.table('marvel').filter{|hero| hero.has_fields(:spouse)}.run(conn)

  - tag: insert_at
    section: jsonobject
    description: Insert a value in to an array at a given index. Returns the modified array.

    name:
      js: insertAt
      py: insert_at
      rb: insert_at

    body:
      py: "$PARENT.insert_at(index, value)"
      rb: "$PARENT.insert_at(index, value)"
      js: "$PARENT.insertAt(index, value)"

    io:
      - - array
        - array

    examples:
      - description: Hulk decides to join the avengers.
        code:
          js: r.expr(["Iron Man", "Spider-Man"]).insertAt(1, "Hulk").run(conn, callback)
          py: r.expr(["Iron Man", "Spider-Man"]).insert_at(1, "Hulk").run(conn)
          rb: r.expr(["Iron Man", "Spider-Man"]).insert_at(1, "Hulk").run(conn)

  - tag: splice_at
    section: jsonobject
    description: Insert several values in to an array at a given index. Returns the modified array.

    name:
      js: spliceAt
      py: splice_at
      rb: splice_at

    body:
      js: "$PARENT.spliceAt(index, array)"
      py: "$PARENT.splice_at(index, array)"
      rb: "$PARENT.splice_at(index, array)"

    io:
      - - array
        - array

    examples:
      - description: Hulk and Thor decide to join the avengers.
        code:
          js: r.expr(["Iron Man", "Spider-Man"]).spliceAt(1, ["Hulk", "Thor"]).run(conn, callback)
          py: r.expr(["Iron Man", "Spider-Man"]).splice_at(1, ["Hulk", "Thor"]).run(conn)
          rb: r.expr(["Iron Man", "Spider-Man"]).splice_at(1, ["Hulk", "Thor"]).run(conn)

  - tag: delete_at
    section: jsonobject
    description: Remove an element from an array at a given index. Returns the modified array.

    name:
      js: deleteAt
      py: delete_at
      rb: delete_at

    body:
      js: "$PARENT.deleteAt(index [,endIndex])"
      py: "$PARENT.delete_at(index [,endIndex])"
      rb: "$PARENT.delete_at(index [,endIndex])"

    io:
      - - array
        - array

    examples:
      - description: Hulk decides to leave the avengers.
        code:
          js: r.expr(["Iron Man", "Hulk", "Spider-Man"]).deleteAt(1).run(conn, callback)
          py: r.expr(["Iron Man", "Hulk", "Spider-Man"]).delete_at(1).run(conn)
          rb: r.expr(["Iron Man", "Hulk", "Spider-Man"]).delete_at(1).run(conn)
      - description: Hulk and Thor decide to leave the avengers.
        code:
          js: r.expr(["Iron Man", "Hulk", "Thor", "Spider-Man"]).deleteAt(1,3).run(conn, callback)
          py: r.expr(["Iron Man", "Hulk", "Thor", "Spider-Man"]).delete_at(1,3).run(conn)
          rb: r.expr(["Iron Man", "Hulk", "Thor", "Spider-Man"]).delete_at(1,3).run(conn)

  - tag: change_at
    section: jsonobject
    description: Change a value in an array at a given index. Returns the modified array.
    io:
      - - array
        - array

    name:
      js: changeAt
      py: change_at
      rb: change_at

    body:
      js: "$PARENT.changeAt(index, value)"
      py: "$PARENT.change_at(index, value)"
      rb: "$PARENT.change_at(index, value)"

    examples:
      - description: Bruce Banner hulks out.
        code:
          js: r.expr(["Iron Man", "Bruce", "Spider-Man"]).changeAt(1, "Hulk").run(conn, callback)
          py: r.expr(["Iron Man", "Bruce", "Spider-Man"]).change_at(1, "Hulk").run(conn)
          rb: r.expr(["Iron Man", "Bruce", "Spider-Man"]).change_at(1, "Hulk").run(conn)
    
  - tag: keys
    section: jsonobject
    description: Return an array containing all of the object's keys.

    body:
      py: "$PARENT.keys()"
      js: "$PARENT.keys()"
      rb: "$PARENT.keys"

    io:
      - - singleSelection
        - array
      - - object
        - array

    examples:
      - description: Get all the keys of a row.
        code:
          rb: r.table('marvel').get('ironman').keys.run(conn)
          py: r.table('marvel').get('ironman').keys().run(conn)
          js: r.table('marvel').get('ironman').keys().run(conn, callback)

