sections:
  - tag: date
    name: Date
    description: These commands provide date operations.
    order: 11

commands:
  - tag: now
    section: date
    description: | 
      Return a time object with the current date.
      The time object has multiple methods to manipulate dates. If you try to return it,
      you will get an object with 3 types: <code>$reql_type$</code>, <code>epoch_time</code> and <code>timezone</code>
    name: now
    body: "$PARENT.now()"
    io:
      - - r
        - time 

    examples:
      - description: Add a new user with the date at which he subscribed.
        code:
          rb: |
            r.table("users").insert({
              :name => "John",
              :subscription_date => r.now()
            }).run(conn)
          py: |
            r.table("users").insert({
              "name": "John",
              "subscription_date": r.now()
            }).run(conn)
          js: |
            r.table("users").insert({
              name: "John",
              subscription_date: r.now()
            }).run(conn, callback)

  - tag: time 
    section: date
    description: | 
      Create a time object built on the given arguments.
    name: time
    body: "$PARENT.time(year, month, day[, hour, minute, second] [, timezone])"
    io:
      - - r
        - time

    examples:
      - description: Update the birthdate of the user "John" to the November 3rd, 1986. 
        code:
          rb: |
            r.table("user").get("John").update(:birthdate => r.time(1986, 11, 3)).run()
          py: |
            r.table("user").get("John").update({"birthdate": r.time(1986, 11, 3)}).run()
          js: |
            r.table("user").get("John").update({birthdate: r.time(1986, 11, 3)}).run()

  - tag: epoch_time 
    section: date
    description: | 
        Create a time object based on an epoch time.
    name: epoch_time 
    body:
      js: "$PARENT.epochTime(epochTime)"
      py: "$PARENT.epoch_time(epoch_time)"
      rb: "$PARENT.epoch_time(epoch_time)"
    io:
      - - r
        - time

    examples:
      - description: Update the birthdate of the user "John" to the November 3rd, 1986. 
        code:
          rb: |
            r.table("user").get("John").update(:birthdate => r.epoch_time(531360000)).run()
          py: |
            r.table("user").get("John").update({"birthdate": r.epoch_time(531360000)}).run()
          js: |
            r.table("user").get("John").update({birthdate: r.epochTime(531360000)}).run()


  - tag: iso8601
    section: date
    description: | 
        Create a time object based on an iso8601 date string. Valid strings are for example
        "2013-08-06", "2013-08-06T07:35Z" or "2013-218". Strings with week currently cannot be used.
    name: iso0601
    body: "$PARENT.iso8601(iso8601Date)"
    io:
      - - r
        - time

    examples:
      - description: Update the birthdate of the user "John" to the November 3rd, 1986. 
        code:
          rb: |
            r.table("user").get("John").update(:birthdate => r.iso8601('1986-11-03')).run()
          py: |
            r.table("user").get("John").update({"birthdate": r.iso8601('1986-11-03')}).run()
          js: |
            r.table("user").get("John").update({birthdate: r.iso8601('1986-11-03')}).run()

  - tag: in_timezone 
    section: date 
    description: | 
      Return the same actual time in a different timezone. The <code>epoch_time</code>
      field does not change. If the timezone is <code>null</code>, the timezone will
      be removed from the time object.

    name:
      js: inTimezone
      rb: in_timezone
      py: in_timezone

    body:
      js:  "$PARENT.inTimezone(timezone)"
      py:  "$PARENT.in_timezone(timezone)"
      rb:  "$PARENT.in_timezone(timezone)"
    io:
      - - time
        - time

    examples:
      - description: Hours of the day in San Francisco (UTC/GMT -8, without daylight saving time).
        code:
          rb: |
            r.now().in_timezone('-08:00').hours().run(conn)
          py: |
            r.now().in_timezone('-08:00').hours().run(conn)
          js: |
            r.now().inTimezone('-08:00').hours().run(conn, callback)

  - tag: timezone
    section: date 
    description: | 
      Return the timezone of the time object.

    name: timezone

    body: "$PARENT.timezone()"
    io:
      - - time
        - string

    examples:
      - description: Return "-07:00"
        code:
          rb: |
            r.now().in_timezone('-07:00').timezone().run(conn)
          py: |
            r.now().in_timezone('-07:00').timezone().run(conn)
          js: |
            r.now().inTimezone('-07:00').timezone().run(conn, callback)



  - tag: during
    section: date
    description: | 
      Return if a time is during two dates (inclusive for the start, exclusive for the end).

    name: during 
    body:
      js:  "$PARENT.during(startTime, endTime)"
      py:  "$PARENT.during(start_time, end_time)"
      rb:  "$PARENT.during(start_time, end_time)"
    io:
      - - time
        - bool

    examples:
      - description: Filter all the posts that were posted between December 1st, 2013 and December 10th, 2013.
        code:
          rb: |
            r.table("posts").filter{ |post|
              post['date'].during(r.time(2013, 12, 1), r.time(2013, 12, 10))
            }.run(conn)
          py: |
            r.table("posts").filter(
                r.row['date'].during(r.time(2013, 12, 1), r.time(2013, 12, 10))
            ).run(conn)
          js: |
            r.table("posts").filter(
                r.row('date').during(r.time(2013, 12, 1), r.time(2013, 12, 10))
            ).run(conn, callback)

  - tag: date 
    section: date 
    description: | 
        Truncate the <code>epoch_time</code> field to the day (at 00:00)

    name: date

    body: "$PARENT.date()"
    io:
      - - time
        - time

    examples:
      - description: Retrieve all the users whose birthday is today
        code:
          rb: |
            r.table("users").filter{ |user|
              user["birthdate"].date().eq(r.now().date())
            }.run(conn)
          py: |
            r.table("users").filter(lambda user:
              user["birthdate"].date() == r.now().date()
            ).run(conn)

          js: |
            r.table("users").filter(function(user) {
              user("birthdate").date().eq(r.now().date())
            }).run(conn, callback)

  - tag: time_of_day
    section: date 
    description: | 
      Return the number of seconds elapsed since the beginning of the day stored in the time object.

    name:
      js: timeOfDay
      py: time_of_day
      rb: time_of_day

    body:
      js: "$PARENT.timeOfDay()"
      py: "$PARENT.time_of_day()"
      rb: "$PARENT.time_of_day()"
    io:
      - - time
        - number 

    examples:
      - description: Retrieve posts that were submitted before noon.
        code:
          rb: |
            r.table("posts").filter{ |post|
                post["date"].time_of_day() <= 12*60*60
            }.run(conn)

          py: |
            r.table("posts").filter(
                r.row["date"].time_of_day() <= 12*60*60
            ).run(conn)

          js: |
            r.table("posts").filter(
                r.row("date").timeOfDay().le(12*60*60)
            ).run(conn, callback)

  - tag: year
    section: date 
    description: | 
      Return the year of a time object.

    name: year 

    body: "$PARENT.year()"
    io:
      - - time
        - number 

    examples:
      - description: Retrieve all the users born in 1986.
        code:
          rb: |
            r.table("users").filter{ |user|
              user["birthdate"].date().eq(1986)
            }.run(conn)
          py: |
            r.table("users").filter(lambda user:
              user["birthdate"].date() == 1986
            ).run(conn)

          js: |
            r.table("users").filter(function(user) {
              user("birthdate").date().eq(1986)
            }).run(conn, callback)



  - tag: month 
    section: date 
    description: | 
      Return the month of a time object as a number between 1 and 12.
      For your convenience, the terms <code>r.january</code>, <code>r.february</code> etc. are defined and map
      to the appropriate integer.


    name: month 

    body: "$PARENT.month()"
    io:
      - - time
        - number 

    examples:
      - description: Retrieve all the users who were born in November.
        code:
          rb: |
            r.table("users").filter{ |user|
              user["birthdate"].month().eq(11)
            }

          py: |
            r.table("users").filter(
              r.row["birthdate"].month() == 11 
            )
          js: |
            r.table("users").filter(
              r.row("birthdate").month().eq(11)
            )
      - description: Retrieve all the users who were born in November.
        code:
          rb: |
            r.table("users").filter{ |user|
              user["birthdate"].month().eq(r.november)
            }

          py: |
            r.table("users").filter(
              r.row["birthdate"].month() == r.november
            )
          js: |
            r.table("users").filter(
              r.row("birthdate").month().eq(r.november)
            )


  - tag: day 
    section: date 
    description: | 
      Return the day of a time object as a number between 1 and 31.

    name: day 

    body: "$PARENT.day()"
    io:
      - - time
        - number 

    examples:
      - description: Return the users born on the 12th of any month.
        code:
          rb: |
            r.table("users").filter{ |user|
              user["birthdate"].month().eq(12)
            }

          py: |
            r.table("users").filter(
              r.row["birthdate"].month() == 12
            )
          js: |
            r.table("users").filter(
              r.row("birthdate").month().eq(12)
            )


  - tag: day_of_week
    section: date 
    description: | 
      Return the day of week of a time object as a number between 1 and 7.
      For your convenience, the terms <code>r.monday</code>, <code>r.tuesday</code> etc. are defined and map
      to the appropriate integer.

    name:
      js: dayOfWeek
      py: day_of_week
      rb: day_of_week

    body:
      js: "$PARENT.dayOfWeek()"
      rb: "$PARENT.day_of_week()"
      py: "$PARENT.day_of_week()"
    io:
      - - time
        - number 

    examples:
      - description: Return today's day of week.
        code:
          rb: |
            r.now().day_of_week().run(conn)
          py: |
            r.now().day_of_week().run(conn)
          js: |
            r.now().dayOfweek().run(conn, callback)
      - description: Retrieve all the users who were born on a Tuesday.
        code:
          rb: |
            r.table("users").filter{ |user|
              user["birthdate"].day_of_week().eq(r.tuesday)
            }

          py: |
            r.table("users").filter(
              r.row["birthdate"].day_of_week() == r.tuesday
            )
          js: |
            r.table("users").filter(
              r.row("birthdate").dayOfWeek().eq(r.tuesday)
            )



  - tag: hours 
    section: date 
    description: | 
      Return the hour in a time object as a number between 0 and 23.

    name: hours 

    body: "$PARENT.hours()"
    io:
      - - time
        - number 

    examples:
      - description: Return the current time.
        code:
          rb: |
            (r.now().hours().coerce_to('string')+':'
                 +r.now().minutes().coerce_to('string')).run(conn)
          py: |
            (r.now().hours().coerce_to('string')+':'
                +r.now().minutes().coerce_to('string')).run(conn)
          js: |
            r.now().hours().coerceTo('string').add(':')
                .add(r.now().minutes().coerceTo('string')).run(conn, callback)

  - tag: minutes
    section: date 
    description: | 
      Return the minute in a time object as a number between 0 and 59.

    name: minutes

    body: "$PARENT.minutes()"
    io:
      - - time
        - number 

    examples:
      - description: Return the current time.
        code:
          rb: |
            (r.now().hours().coerce_to('string')+':'
                +r.now().minutes().coerce_to('string')).run(conn)
          py: |
            (r.now().hours().coerce_to('string')+':'
                +r.now().minutes().coerce_to('string')).run(conn)
          js: |
            r.now().hours().coerceTo('string').add(':')
                .add(r.now().minutes().coerceTo('string')).run(conn, callback)

  - tag: seconds
    section: date 
    description: | 
      Return the seconds in a time object as a number between 0 and 59.999 (double precision).

    name: seconds

    body: "$PARENT.seconds()"
    io:
      - - time
        - number 

    examples:
      - description: Return the current time.
        code:
          rb: |
            (r.now().hours().coerce_to('string')+':'
                +r.now().minutes().coerce_to('string')+':'
                +r.now().seconds().coerce_to('string')).run(conn)
          py: |
            (r.now().hours().coerce_to('string')+':'
                +r.now().minutes().coerce_to('string')+':'
                +r.now().seconds().coerce_to('string')).run(conn)
          js: |
            r.now().hours().coerceTo('string').add(':')
                .add(r.now().minutes().coerceTo('string')).add(':')
                .add(r.now().seconds().coerceTo('string')).run(conn, callback)


  - tag: to_iso8601 
    section: date 
    description: | 
      Convert a time object to its iso 8601

    name:
      js: toISO8601
      py: to_iso8601
      rb: to_iso8601

    body: "$PARENT.seconds()"
    io:
      - - time
        - number 

    examples:
      - description: Return the current time in an ISO8601 format.
        code:
          rb: |
            r.now().to_iso8601()
          py: |
            r.now().to_iso8601()
          js: |
            r.now().toISO8601()


  - tag: to_epoch_time 
    section: date 
    description: | 
      Convert a time object to its iso 8601

    name:
      js: toEpochTime
      py: to_epoch_time
      rb: to_epoch_time

    body:
      js: "$PARENT.toEpochTime()"
      py: "$PARENT.to_epoch_time()"
      rb: "$PARENT.to_epoch_time()"

    io:
      - - time
        - number 

    examples:
      - description: Return the current time in an ISO8601 format.
        code:
          rb: |
            r.now().to_epoch_time()
          py: |
            r.now().to_epoch_time()
          js: |
            r.now().toEpochTime()


