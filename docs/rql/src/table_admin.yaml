sections:
  - tag: table_admin
    name: Manipulating tables
    description: These commands allow table manipulation.
    order: 2

commands:
  - tag: table_create
    section: table_admin
    description: |
      Create a table. A RethinkDB table is a collection of JSON documents.<br
      /><br />If successful, the operation returns an object: <code>{created: 1}</code>.  If
      a table with the same name already exists, the operation throws <code>RqlRuntimeError</code>.

    body: tableName[, options]
    parent: db
    returns: json

    examples:
      - description: |
          Create a table named 'dc_universe' with the primary key set to field 'id'.
          If a new document doesn't contain the field 'id', the database will
          autogenerate a value for it.
        code: r.db('test').table_create('dc_universe').run(conn)
      - description: |
          Create a table named 'dc_universe' using the field 'name'
          as primary key.
        code:
          py: r.db('test').table_create('dc_universe', primary_key='name').run(conn)
          rb: r.db('test').table_create('dc_universe', :primary_key => 'name').run(conn)

    js:
      name: tableCreate
      examples:
        0:
          code: r.db('test').tableCreate('dc_universe').run(conn, callback)
          can_try: true
          dataset: marvel
        1:
          code: r.db('test').tableCreate('dc_universe', {primaryKey:'name'}).run(conn, callback)
          can_try: true
          dataset: marvel

  - tag: table_drop
    section: table_admin
    description: |
      Drop a table. The table and all its data will be deleted.<br /><br
      />If succesful, the operation returns an object: <code>{dropped: 1}</code>.
      If the specified table doesn''t exist a <code>RqlRuntimeError</code> is thrown.

    body: table_name
    parent: db
    returns: json

    examples:
      - description: Drop a table named 'dc_universe'.
        code: r.db('test').table_drop('dc_universe').run(conn)

    js:
      name: tableDrop
      body: tableName
      examples:
        0:
          code: r.db('test').tableDrop('dc_universe').run(conn, callback)
          can_try: true
          dataset: marvel

  - tag: table_list
    section: table_admin
    description: | 
      List all table names in a database.<br /><br />
      The result is a list of strings.

    parent: db
    returns: sequence

    examples:
      - description: List all tables of the 'test' database.
        code: r.db('test').table_list().run(conn)

    js:
      name: tableList
      examples:
        0:
          code: r.db('test').tableList().run(conn, callback)
          can_try: true
          dataset: marvel

    rb:
      dont_need_parenthesis: true

  - tag: index_create
    section: table_admin
    description: Create a new secondary index on this table.

    body: indexName[, indexFunction]
    parent: table
    returns: json

    examples:
      - description: |
          To efficiently query our heros by name we can create a secondary
          index based on the value of that field. We can already quickly query
          heros by name with the primary index but to do the same based on hero
          code names we'll have to create a secondary index based on that
          attribute.
        code:
          py: "r.table('dc').index_create('code_name', lambda hero: hero['code_name'])"
          js: r.table('dc').indexCreate('code_name', function(hero) { return hero('code_name'); })
          rb: r.table('dc').index_create('code_name') {|hero| hero['code_name'] }
      - description: |
          We can create a compound index simply by returning an array of values when creating
          the index.
        code:
          py: |
            r.table('dc').index_create('parental_planets',
              lambda hero: [hero['mothers_home_planet'], hero['fathers_home_planet']]
            )
          js: |
            r.table('dc').indexCreate('parental_planets', function(hero) {
              return [hero('mothers_home_planet'), hero('fathers_home_planet')];
            })
          rb: |
            r.table('dc').index_create('parental_planets') {|hero|
              [hero['mothers_home_planet'], hero['fathers_home_planet']]
            }
      - description: |
          As a shortcut you can create a secondary index based on the value of an existing
          field by naming the index after that field and leaving off the index function.
        code:
          py: r.table('dc').index_create('home_town')
          js: r.table('dc').indexCreate('home_town')
          rb: r.table('dc').index_create('home_town')

  - tag: index_drop
    section: table_admin
    description: Delete a previously created secondary index of this table.

    body: indexName
    parent: table
    returns: json

    examples:
      - description: |
          Drop a secondary index named 'name'.
        code:
          py: r.table('marvel').index_drop('name')
          js: r.table('marvel').indexDrop('name')
          rb: r.table('marvel').index_drop('name')

  - tag: index_list
    section: table_admin
    description: List all the secondary indexes of this table.

    parent: table
    returns: json

    examples:
      - description: List the available secondary indexes for this table.
        code:
          py: r.table('marvel').index_list()
          js: r.table('marvel').indexList()
          rb: r.table('marvel').index_list()
