# Release 1.5.0 (The Graduate) #

Released on 2013-13-32

This release introduces secondary indexes, stability and performance enhancements and many bug fixes.

## New Features ##

* Server
  * #69: Bulletproof js execution in v8
    * `r.js` now takes an optional `timeout` argument
  * #88: Secondary and compound indexes
  * #165: Backtraces on OSX
  * #207: Make write batching tunable again
  * #311: Daemon mode
  * #387: Document the command line option --web-static-directory
  * #423: Provide a way to log to `stdout`/`stderr`
  * #457: Batched inserts
  * #496: Get libc++ working with OSX
  * #672: We should move back to shared pointers instead of environment checkpoints in the RQL layer
* CLI
  * #566: In admin CLI, `ls tables --long` should include a `durability` column
* Web UI
  * #331: Improve data explorer indentation and brace pairing
  * #355: Check for updates in the admin UI
  * #395: Data explorer - Auto completion for databases/tables names
  * #514: Migrate reql_json.doc to YAML
  * #569: Toggle for Data Explorer Electric Punctuation
  * #572: Additional "Add Table" buttons & colored "Delete Database" button
  * #647: Toggle data explorer electric punctuation
  * #707: Two step confirmation to the delete database button
* ReQL
  * #469: Add an `info` command
  * #604: Never return an array in JavaScript
  * #670: Add soft durability option to `table_create`
* Testing
  * #480: Test on Travis-CI
  * #517: Resurrect integration tests
  * #574: We need a way to re-run just one RQL test with the test framework
  * #587: Doc validation should work for ruby examples
  * #669: Add color to run-tests.sh output

## Fixed bugs ##

* Server
  * Fix #403: Serialization of perfmon_result_t is 32-bit/64-bit dependent
  * Fix #505: Failure on read query "tcmalloc: allocation failed"
  * Fix #510: Make bind to `0.0.0.0` be equivalent to `all`
  * Fix #639: 100% cpu utilization (on OSX, not sure about linux)
  * Fix #645: Server crash when updating replicas / acks
  * Fix #665: src/rdb_protocol/protocol.cc at line 699: Assertion failed: [!br.point_replaces.empty()]
  * Fix #750: Intermittent RPCSemilatticeTest.MetadataExchange failure
  * Fix #757: RethinkDB 1.4.4 crash with branch queries and default database
* Documentation
  * Fix #503: outdated useOutdated documentation
  * Fix #563: Fix doc for typeof()
  * Fix #610: Optional arguments for table_create are not documented: datacenter and cache_size
  * Fix #631: Docs for `reduce` are missing parameters
  * Fix #651: replace r_datum with datum
  * Fix #679: Protobuffer Spec: Example documentation
  * Fix #691: API Documentation: Example for zip is faulty
* Web UI
  * Fix #583: DataExplorer suggester for table is incomplete
  * Fix #529: Suggestion arrow goes out of bounds if you have excessive whitespace
  * Fix #583: DataExplorer suggester for table is incomplete
  * Fix #584: DataExplorer Suggester suggestions
  * Fix #623: Modals (e.g. "delete database") have subpar margins
  * Fix #629: Improve the buttons on the Tables View (and throughout the UI)
  * Fix #662: Command key deletes text selection in data explorer
  * Fix #725: Dataexplorer - Do a better job with docs
  * Fix #790: False values in a document show up as blank in the tree view
* ReQL
  * Fix #46: r.tableCreate() not defined in JS
  * Fix #125: Grouped reductions (map/reduce, groupby) should return a stream, not array
  * Fix #370: Map after dbList() and tableList()
  * Fix #421: Consider changing the return values from mutation operations
  * Fix #525: Improve error for groupBy
  * Fix #527: Integers returned as floats
  * Fix #603: Catch error if no callback is passed to cursor.toArray()
  * Fix #632: Python driver - Insert object with non valid key
  * Fix #640: driver interrupt handling behavior
  * Fix #642: Ruby client has a bad error message when you try and run a query on a closed connection
  * Fix #650: Python driver sends "END" instead of "STOP"
  * Fix #663: Handle undefined value in an object
  * Fix #678: .limit() should not automatically convert to an array
  * Fix #689: The Python driver hardcodes the default database
  * Fix #704: `typeOf` is broken in JS driver
  * Fix #730: ruby driver accepts methods that don't exist
  * Fix #732: Fix javascript driver performance
  * Fix #733: Wire protocol: GroupBy object must be MAKE_OBJ Term
  * Fix #761: The Ruby driver probably doesn't work with Ruby 1.9
  * Fix #767: Forbid NaN with the JavaScript driver
  * Fix #779: Strings containing NULL are truncated
  * Fix #789: Remove unnecessary uses of Class#hash in Ruby driver
  * Fix #799: Optional args to `run` in Python driver
* Testing
  * Fix #653: run-tests.sh seems not to work on OS X
* Build
  * Fix #475: `make -j2` segfaults when building on ubuntu 10.04
  * Fix #541: make clean should clean everything
  * Fix #630: Clean up the rethinkdb source tree
  * Fix #635: Building should fail and die quickly with bad versions of coffee-script
  * Fix #693: `make` in next gets its numbering confused
  * Fix #694: warnings when building with clang and ccache
  * Fix #717: ./configure --fetch-protobuf doesn't work
* Migration
  * Fix #777: Migration script (or server?) appear to hang on data import
  * Fix #782: import_export.rb in next defaults to sending batches of size 2

## Other ##

  * #508: Delete JS server code
  * [All closed issues between 1.4.5 and 1.5.0](https://github.com/rethinkdb/rethinkdb/issues?milestone=8&page=1&state=closed)

---

# Release 1.4.5 (Some Like It Hot) #

Released on 2013-05-03.

## Changes ##

Bug fix update:

* Increase the TCP accept backlog (#369).

---

# Release 1.4.4 (Some Like It Hot) #

Released on 2013-04-19.

## Changes ##

Bug fix update:

* Improved the documentation
  * Made the output of `rethinkdb help` and `--help` consistent (#643)
  * Clarify details about the client protocol (#649)
* Cap the size of data returned from rgets not just the number of values (#597)
  * The limit changed from 4000 rows to 1MiB
* Partial bug fix: Rethinkdb server crashing (#621)
* Fixed bug: Can't insert objects that use 'self' as a key with Python driver (#619)
* Fixed bug: [Web UI] Statistics graphs are not plotted correctly in background tabs (#373)
* Fixed bug: [Web UI] Large JSON Causes Data Explorer to Hang (#536)
* Fixed bug: Import command doesn't import last row if doesn't have end-of-line (#637)
* Fixed bug: [Web UI] Cubism doesn't unbind some listeners (#622)
* Fixed crash: Made global optargs actually propagate to the shards properly (#683)

---

# Release 1.4.3 (Some Like It Hot) #

Released on 2013-04-10.

## Changes ##

Bug fix update:

* Improve the networking code in the Python driver
* Fix a crash triggered by a type error when using concatMap (#568)
* Fix a crash when running `rethinkdb proxy --help` (#565)
* Fix a bug in the Python driver that caused it to occasionally return `None` (#564)

---

# Release 1.4.2 (Some Like It Hot) #

Released on 2013-03-30.

## Changes ##

Bug fix update:

* Replace `~` with `About` in the web UI (#485)
* Add framing documentation to the protobuf spec (#500)
* Fix crashes triggered by .orderBy().skip() and .reduce(r.js()) (#522, #545)
* Replace MB with GB in an error message (#526)
* Remove some semicolons from the protobuf spec (#530)
* Fix the `rethinkdb import` command (#535)
* Improve handling of very large queries in the data explorer (#536)
* Fix variable shadowing in the javascript driver (#546)

---

# Release 1.4.1 (Some Like It Hot) #

Released on 2013-03-22.

## Changes ##

Bug fix update:

* Python driver fix for TCP streams (#495)
* Web UI fix that reduces the number of AJAX requests (#481)
* JS driver: added useOutdated to r.table() (#502)
* RDB protocol performance fix in release mode.
* Performance fix when using filter with object shortcut syntax.
* Do not abort when the `runuser` or `rungroup` options are present (#512)

---

# Release 1.4 (Some Like It Hot) #

Relased on 2013-03-18.

## Changes ##

* Improved ReQL wire protocol and client drivers
* New build system
* Data explorer query history

---

# Release 1.3.2 (Metropolis) #

Released on 2013-01-15.

## Changes ##

* Fixed security bug in http server.

---

# Release 1.3.1 (Metropolis) #

Released on 2012-12-20.

## Changes ##

* Fixed OS X crash on ReQL exceptions.

---

# Release 1.3.0 (Metropolis) #

Released on 2012-12-20.

## Changes ##

* Native OS X support.
* 32-bit support.
* Support for legacy systems (e.g. Ubuntu 10.04)

---

# Release 1.2.8 (Rashomon) #

Released on 2012-12-15.

## Changes ##

* Updating data explorer suggestions to account for recent `r.row`
  changes.

---

# Release 1.2.7 (Rashomon) #

Released on 2012-12-14.

## Changes ##

* Lots and lots of bug fixes

---

# Release 1.2.6 (Rashomon) #

Released on 2012-11-13.

## Changes ##

* Fixed the version string
* Fixed 'crashing after crashed'
* Fixed json docs

---

# Release 1.2.5 (Rashomon) #

Released on 2012-11-11.

## Changes ##

* Checking for a null ifaattrs

---

# Release 1.2.4 (Rashomon) #

Released on 2012-11-11.

## Changes ##

* Local interface lookup is now more robust.

---

# Release 1.2.3 (Rashomon) #

Released on 2012-11-09.

## Changes ##

* Fixes a bug in the query engine that causes large range queries to
  return incorrect results.

---

# Release 1.2.0 (Rashomon) #

Released on 2012-11-09.

## Changes ##

This is the first release of the product. It includes:

* JSON data model and immediate consistency support
* Distributed joins, subqueries, aggregation, atomic updates
* Hadoop-style map/reduce
* Friendly web and command-line administration tools
* Takes care of machine failures and network interrupts
* Multi-datacenter replication and failover
* Sharding and replication to multiple nodes
* Queries are automatically parallelized and distributed
* Lock-free operation via MVCC concurrency

## Limitations ##

There are a number of technical limitations that aren't baked into the
architecture, but were not resolved in this release due to time
pressure. They will be resolved in subsequent releases.

* Write requests have minimal batching in memory and are flushed to
  disk on every write. This significantly limits write performance,
  expecially on rotational disks.
* Range commands currently don't use an index.
* The clustering system has a bottleneck in cluster metadata
  propagation. Cluster management slows down significantly when more
  than sixteen shards are used.

