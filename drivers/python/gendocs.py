# This script reads the api documentation and generates python statements
# that set the __doc__ strings of all the documented ReQL functions.
#
# These statements should be placed in drivers/python/rethinkdb/docs.py

import json
import sys
import re

# The json documentation generated from docs/rql/src/*.yaml
docs_file = "../../build/docs/reql_docs.json"

# Load the json documentation
docs = json.load(open(docs_file))

# The class for all reql objects
query = 'rethinkdb.ast.RqlQuery.'

# The python class associated with each type
parents = {
    None: '',
    'r': 'rethinkdb.',
    'sequence': query,
    'query': query,
    'stream': query,
    'singleSelection': query,
    'array': query,
    'number': query,
    'bool': query,
    'value': query,
    'string': query,
    'time': query,
    'any': query,
    'connection': 'rethinkdb.net.Connection.',
    'cursor': 'rethinkdb.net.Cursor.',
    'db': 'rethinkdb.ast.DB.',
    'table': 'rethinkdb.ast.Table.',
}

# The real python names for names used in the docs
tags = {
    '[]': [(query, '__getitem__')],
    '+': [(query, '__add__'), ('rethinkdb.', 'add')],
    '-': [(query, '__sub__'), ('rethinkdb.', 'sub')],
    '*': [(query, '__mul__'), ('rethinkdb.', 'mul')],
    '/': [(query, '__div__'), ('rethinkdb.', 'div')],
    '%': [(query, '__mod__'), ('rethinkdb.', 'mod')],
    '&': [(query, '__and__'), ('rethinkdb.', 'all')],
    '|': [(query, '__or__'), ('rethinkdb.', 'any')],
    '==': [(query, '__eq__')],
    '!=': [(query, '__ne__')],
    '<': [(query, '__lt__')],
    '>': [(query, '__gt__')],
    '<=': [(query, '__le__')],
    '>=': [(query, '__ge__')],
    '~': [(query, '__invert__'), (query, 'not_'), ('rethinkdb.', 'not_')],
    'r': [('', 'rethinkdb')],
    'count': lambda parent: not parent == 'rethinkdb.' and [(query, 'count')] or []
}

# Whether the given namespaces have methods
has_methods = { 'rethinkdb.': False, '': False }

# Convert the html formatting into plain text
def doc_format(doc):
    return doc.replace("<br />", "\n") \
              .replace("<br/>", "\n") \
              .replace("\n\n\n", "\n\n") \
              .replace("<code>", "") \
              .replace("</code>", "") \
              .replace("<li>", "* ") \
              .replace("</li>", "") \
              .replace("<ul>", "") \
              .replace("</ul>", "")

def example_format(example):
    return '\n>>> ' + re.sub("\n(.)", "\n... \\1", example)

# Start generating the docs.py file
print '# Generated by gendocs.py'
print
print 'import rethinkdb'

# For each section of the documentation
for section in docs['sections']:

    # For each command in each section
    for command in section['commands']:

        # Skip it if it is not apython command
        if not command['langs']['py'].has_key('name'):
            continue

        # Format the description and examples
        doc = doc_format(command['description'])
        for example in command['langs']['py']['examples']:
            doc = doc + '\n\n' + \
                  doc_format(example['description']) + example_format(example['code'])

        # Find all the python names (and the associated modules) for the command
        parent = parents[command['io'][0][0]]
        tag = command['langs']['py']['name']
        names = tags.get(tag, [(parent, tag)])
        if type(names) == type(lambda x: x):
            names = names(parent)

        # Print out the statements that sets each __doc__ string
        for parent, name in names:
            if has_methods.get(parent, True):
                func = '.__func__'
            else:
                func = ''
            print parent + name + func + '.__doc__' + ' = ' + repr(doc)
