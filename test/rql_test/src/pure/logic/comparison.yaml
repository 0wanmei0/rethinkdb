desc: Tests of comparison operators
tests:
    
    ### Numeric comparisons

    ## basic <

    # Python overloads the comparison operators (in both directions)
    - py: [r.expr(1) < 2, 1 < r.expr(2)]
      js: r(1).lt(2)
      rb: r(1) < 2
      ot: true
    - py: r.expr(3) < 2
      js: r(3).lt(2)
      rb: r(3) < 2
      ot: false
    - py: r.expr(2) < 2
      js: r(2).lt(2)
      rb: r(2) < 2
      ot: false

    # All Comparisons can take an arbitrary number of arguments though
    # the functionality is only available in JS at the moment
    - js: r(1).lt(2, 3, 4)
      ot: true
    - js: r(1).lt(2, 3, 2)
      ot: false

    ## basic >

    - py: [r.expr(1) > 2, 1 > r.expr(2)]
      js: r(1).gt(2)
      rb: r(1) > 2
      ot: false
    - py: r.expr(3) > 2
      js: r(3).gt(2)
      rb: r(3) > 2
      ot: true
    - py: r.expr(2) > 2
      js: r(2).gt(2)
      rb: r(2) > 2
      ot: false

    - js: r(4).gt(3, 2, 1)
      ot: true
    - js: r(4).gt(3, 2, 3)
      ot: false

    ## basic ==

    - py: [r.expr(1) == 2, 1 == r.expr(2)]
      js: r(1).eq(2)
      rb: r(1).eq 2
      ot: false
    - py: r.expr(3) == 2
      js: r(3).eq(2)
      rb: r(3).eq 2
      ot: false
    - py: r.expr(2) == 2
      js: r(2).eq(2)
      rb: r(2).eq 2
      ot: true

    - js: r(1).eq(1, 1, 1)
      ot: true
    - js: r(1).eq(1, 2, 1)
      ot: false

    ## basic !=

    - py: [r.expr(1) != 2, 1 != r.expr(2)]
      js: r(1).ne(2)
      rb: r(1).ne 2
      ot: true
    - py: r.expr(3) != 2
      js: r(3).ne(2)
      rb: r(3).ne 2
      ot: true
    - py: r.expr(2) != 2
      js: r(2).ne(2)
      rb: r(2).ne 2
      ot: false

    - js: r(1).ne(3, 2, 4)
      ot: true
    - js: r(1).ne(3, 2, 3)
      ot: true

    ## basic <=

    - py: [r.expr(1) <= 2, 1 <= r.expr(2)]
      js: r(1).le(2)
      rb: r(1) <= 2
      ot: true
    - py: r.expr(3) <= 2
      js: r(3).le(2)
      rb: r(3) <= 2
      ot: false
    - py: r.expr(2) <= 2
      js: r(2).le(2)
      rb: r(2) <= 2
      ot: true

    - js: r(1).le(1, 2, 2)
      ot: true
    - js: r(1).le(1, 3, 2)
      ot: false

    ## basic >=

    - py: [r.expr(1) >= 2, 1 >= r.expr(2)]
      js: r(1).ge(2)
      rb: r(1) >= 2
      ot: false
    - py: r.expr(3) >= 2
      js: r(3).ge(2)
      rb: r(3) >= 2
      ot: true
    - py: r.expr(2) >= 2
      js: r(2).ge(2)
      rb: r(2) >= 2
      ot: true

    - js: r(4).ge(4, 2, 2)
      ot: true
    - js: r(4).ge(4, 2, 3)
      ot: false

    # Comparisons for NULL
    - py: [r.expr(None) == None, None == r.expr(None)]
      js: r(null).eq(null)
      ot: true

    - py: [r.expr(None) < None, None < r.expr(None)]
      js: r(null).lt(null)
      ot: false

    - py: [r.expr(None) > None, None > r.expr(None)]
      js: r(null).gt(null)
      ot: false

    # Comparisons for STRING
    #  STRING comparison should be lexicagraphical
    - py: r.expr('a') == 'a'
      js: r('a').eq('a')
      ot: true

    - py: r.expr('a') == 'aa'
      js: r('a').eq('aa')
      ot: false

    - py: r.expr('a') < 'aa'
      js: r('a').lt('aa')
      ot: true

    - py: r.expr('a') < 'bb'
      js: r('a').lt('bb')
      ot: true

    - py: r.expr('bb') > 'a'
      js: r('bb').gt('a')
      ot: true

    - py: r.expr('abcdef') < 'abcdeg'
      js: r('abcdef').lt('abcdeg')
      ot: true

    - py: r.expr('abcdefg') > 'abcdeg'
      js: r('abcdefg').lt('abcdeg')
      ot: false

    - py: r.expr('A quick brown fox') > 'A quick brawn fox')
      js: r('A quick brown fox').gt('A quick brawn fox')

    # Comparisons for ARRAY
    #  Also lexicographical

    - py: r.expr([1]) < [2]
      js: r([1]).lt([2])
      ot: true

    - py: r.expr([1]) > [2]
      js: r([1]).gt([2])
      ot: false

    - py: r.expr([1, 0]) < [2]
      js: r([1, 0]).lt([2])
      ot: true

    - py: r.expr([1, 0]) < [1]
      js: r([1, 0]).lt([1])
      ot: false

    - py: r.expr([1, 0]) > [0]
      js: r([1, 0]).gt([0])
      ot: true

    - py: r.expr([1, 'a']) < [1, 'b']
      js: r([1, 'a']).lt([1, 'b'])
      ot: true

    - py: r.expr([0, 'z']) < [1, 'b']
      js: r([0, 'z']).lt([1, 'b'])
      ot: true

    - py: r.expr([1, 1, 1]) < [1, 0, 2]
      ot: false

    - py: r.expr([1, 0, 2]) < [1, 1, 1]
      ot: true

    # Comparisons for OBJECT

    - py: r.expr({'a':0}) == {'a':0}
      js: r({a:0}).eq({'a':0})
      ot: true

    - py: r.expr({'a':0, 'b':1}) == {'b':1, 'a':0}
      js: r({a:0, b:1}).eq({b:1, a:0})
      ot: true

    - py: r.expr({'a':0, 'b':1, 'c':2}) == {'b':1, 'a':0}
      js: r({a:0, b:1, c:2}).eq({b:1, a:0})
      ot: false

    - py: r.expr({'a':0, 'b':1}) == {'b':1, 'a':0, 'c':2}
      js: r({a:0, b:1}).eq({b:1, a:0, c:2})
      ot: false

    - py: r.expr({'a':0, 'b':1, 'd':2}) == {'b':1, 'a':0, 'c':2}
      js: r({a:0, b:1, d:2}).eq({b:1, a:0, c:2})
      ot: false

    - py: r.expr({'a':0}) < {'b':0}
      js: r({a:0}).lt({b:0})
      ot: true

    - py: r.expr({'a':1}) < {'b':0}
      js: r({a:1}).lt({b:0})
      ot: true

    - py: r.expr({'b':1}) < {'b':0}
      js: r({b:1}).lt({b:0})
      ot: false

    - py: r.expr({'b':1}) < {'a':0}
      js: r({b:1}).lt({a:0})
      ot: false

    - py: r.expr({'a':0, 'b':1, 'c':2}) < {'a':0, 'b':1, 'c':2}
      js: r({a:0, b:1, c:2}).lt({a:0, b:1, c:2})
      ot: false

    - py: r.expr({'a':0, 'b':1, 'c':2, 'd':3}) < {'a':0, 'b':1, 'c':2}
      js: r({a:0, b:1, c:2, d:3}).lt({a:0, b:1, c:2})
      ot: false

    - py: r.expr({'a':0, 'b':1, 'c':2}) < {'a':0, 'b':1, 'c':2, 'd':3}
      js: r({a:0, b:1, c:2}).lt({a:0, b:1, c:2, d:3})
      ot: true

    - py: r.expr({'a':0, 'c':2}) < {'a':0, 'b':1, 'c':2}
      js: r({a:0, c:2}).lt({a:0, b:1, c:2})
      ot: false

    - py: r.expr({'a':0, 'c':2}) > {'a':0, 'b':1, 'c':2}
      js: r({a:0, c:2}).gt({a:0, b:1, c:2})
      ot: true

    # Comparisons across types
    #  RQL primtive types compare as if mapped to the following numbers
    #   ARRAY:   0
    #   BOOLEAN: 1
    #   NULL:    2
    #   NUMBER:  3
    #   OBJECT:  4
    #   STRING:  5


      #ot: err('RqlRuntimeError', 'Expected type NUMBER but found STRING.', [1])
