desc: Tests r.default
tests:

    # The test driver sometimes rewrites `null` to `None` in Ruby for unknown reasons.
    - def:
        rb: None = nil

    # tst
    - cd: r.expr(1).default(2)
      ot: 1
    - cd: r.expr(nil).default(2)
      ot: 2
    - cd: r.expr({})['b'].default(2)
      ot: 2
    - cd: r.expr(r.expr('a')['b']).default(2)
      ot: err("RqlRuntimeError", "Expected type OBJECT but found STRING.", [])
    - cd: r.expr([]).reduce{|a,b| a+b}.default(2)
      ot: 2
    - cd: r.expr('a').reduce{|a,b| a+b}.default(2)
      ot: err("RqlRuntimeError", "Cannot convert STRING to SEQUENCE", [])
    - cd: (r.expr(nil) + 5).default(2)
      ot: 2
    - cd: (5 + r.expr(nil)).default(2)
      ot: 2
    - cd: (5 - r.expr(nil)).default(2)
      ot: 2
    - cd: (r.expr(nil) - 5).default(2)
      ot: 2
    - cd: (r.expr('a') + 5).default(2)
      ot: err("RqlRuntimeError", "Expected type STRING but found NUMBER.", [])
    - cd: (5 + r.expr('a')).default(2)
      ot: err("RqlRuntimeError", "Expected type NUMBER but found STRING.", [])
    - cd: (r.expr('a') - 5).default(2)
      ot: err("RqlRuntimeError", "Expected type NUMBER but found STRING.", [])
    - cd: (5 - r.expr('a')).default(2)
      ot: err("RqlRuntimeError", "Expected type NUMBER but found STRING.", [])

    - cd: r.expr(1).default(r.error)
      ot: 1
    - cd: r.expr(nil).default(r.error)
      ot: nil
    - cd: r.expr({})['b'].default(r.error)
      ot: err("RqlRuntimeError", "No attribute `b` in object.", [])
    - cd: r.expr([]).reduce{|a,b| a+b}.default(r.error)
      ot: err("RqlRuntimeError", "Cannot reduce over an empty stream with no base.", [])
    - cd: (r.expr(nil) + 5).default(r.error)
      ot: err("RqlRuntimeError", "Expected type NUMBER but found NULL.", [])
    - cd: (5 + r.expr(nil)).default(r.error)
      ot: err("RqlRuntimeError", "Expected type NUMBER but found NULL.", [])
    - cd: (5 - r.expr(nil)).default(r.error)
      ot: err("RqlRuntimeError", "Expected type NUMBER but found NULL.", [])
    - cd: (r.expr(nil) - 5).default(r.error)
      ot: err("RqlRuntimeError", "Expected type NUMBER but found NULL.", [])

    - cd: r.expr(1).default{|e| e}
      ot: 1
    - cd: r.expr(nil).default{|e| e}
      ot: nil
    - cd: r.expr({})['b'].default{|e| e}
      ot: ("No attribute `b` in object:\n{\n}")
    - cd: r.expr([]).reduce{|a,b| a+b}.default{|e| e}
      ot: ("Cannot reduce over an empty stream with no base.")
    - cd: (r.expr(nil) + 5).default{|e| e}
      ot: ("Expected type NUMBER but found NULL.")
    - cd: (5 + r.expr(nil)).default{|e| e}
      ot: ("Expected type NUMBER but found NULL.")
    - cd: (5 - r.expr(nil)).default{|e| e}
      ot: ("Expected type NUMBER but found NULL.")
    - cd: (r.expr(nil) - 5).default{|e| e}
      ot: ("Expected type NUMBER but found NULL.")

    - def: arr = r([{:a => 1}, {:a => nil}, {}])

    - cd: arr.filter{|x| x[:a].eq(1)}
      ot: [{'a':1}]
    - cd: arr.filter(:default => false){|x| x[:a].eq(1)}
      ot: [{'a':1}]
    - cd: arr.filter(:default => true){|x| x[:a].eq(1)}
      ot: [{'a':1}, {}] # `nil` compares not equal to 1 with no error
    - cd: arr.filter(:default => r.error){|x| x[:a].eq(1)}
      ot: err("RqlRuntimeError", "No attribute `a` in object.", [])

    - cd: r(false).do{|d| arr.filter(:default => d){|x| x[:a].eq(1)}}
      ot: [{'a':1}]
    - cd: r(true).do{|d| arr.filter(:default => d){|x| x[:a].eq(1)}}
      ot: [{'a':1}, {}] # `nil` compares not equal to 1 with no error

    - cd: arr.filter{|x| x[:a].default(0).eq(1)}
      ot: [{'a':1}]
    - cd: arr.filter{|x| x[:a].default(1).eq(1)}.orderby(:a)
      ot: [{}, {'a':null}, {'a':1}]
    - cd: arr.filter{|x| x[:a].default(r.error).eq(1)}
      ot: [{'a':1}] # gets caught by `filter` default

    - cd: r(0).do{|i| arr.filter{|x| x[:a].default(i).eq(1)}}
      ot: [{'a':1}]
    - cd: r(1).do{|i| arr.filter{|x| x[:a].default(i).eq(1)}}.orderby(:a)
      ot: [{}, {'a':null}, {'a':1}]

    - cd: r.table_create('default_test')
      ot: ({'created':1})

    - def: tbl = r.table('default_test')

    - cd: tbl.insert(arr)
      ot: ({'deleted':0.0,'replaced':0.0,'generated_keys':arrlen(3,uuid()),'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':3})

    - cd: tbl.filter{|x| x[:a].eq(1)}.pluck('a')
      ot: [{'a':1}]
    - cd: tbl.filter(:default => false){|x| x[:a].eq(1)}.pluck('a')
      ot: [{'a':1}]
    - cd: tbl.filter(:default => true){|x| x[:a].eq(1)}.pluck('a')
      ot: [{'a':1}, {}] # `nil` compares not equal to 1 with no error
    - cd: tbl.filter(:default => r.error){|x| x[:a].eq(1)}.pluck('a')
      ot: err("RqlRuntimeError", "No attribute `a` in object.", [])

    - cd: r(false).do{|d| tbl.filter(:default => d){|x| x[:a].eq(1)}}.pluck('a')
      ot: [{'a':1}]
    - cd: r(true).do{|d| tbl.filter(:default => d){|x| x[:a].eq(1)}}.pluck('a')
      ot: [{'a':1}, {}] # `nil` compares not equal to 1 with no error

    - cd: tbl.filter{|x| x[:a].default(0).eq(1)}.pluck('a')
      ot: [{'a':1}]
    - cd: tbl.filter{|x| x[:a].default(1).eq(1)}.orderby(:a).pluck('a')
      ot: [{}, {'a':null}, {'a':1}]
    - cd: tbl.filter{|x| x[:a].default(r.error).eq(1)}.pluck('a')
      ot: [{'a':1}] # gets caught by `filter` default

    - cd: r(0).do{|i| tbl.filter{|x| x[:a].default(i).eq(1)}}.pluck('a')
      ot: [{'a':1}]
    - cd: r(1).do{|i| tbl.filter{|x| x[:a].default(i).eq(1)}}.orderby(:a).pluck('a')
      ot: [{}, {'a':null}, {'a':1}]

    - cd: r.table_drop('default_test')
      ot: ({'dropped':1})