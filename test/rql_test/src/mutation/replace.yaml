desc: Tests replacement of selections
tests:

    # Set up some data
    - cd: r.db('test').table_create('test')
      ot: ({'created':1})

    - def: tbl = r.db('test').table('test')

    - cd: r.db('test').table_create('test2')
      ot: ({'created':1})

    - def: tbl2 = r.db('test').table('test2')
      cd: []

    - py: tbl.insert([{'id':i} for i in xrange(100)])
      js: |
        tbl.insert(function(){
            var res = []
            for (var i = 0; i < 100; i++) {
                res.push({id:i});
            }
            return res;
        }())
      rb: tbl.insert((1..100).map{ |i| {:id => i } })
      ot: ({'inserted':100})

    - cd: tbl.count()
      ot: 100

    # Identity

    - py: tbl.get(12).replace(lambda row:{'id':row['id']})
      js: tbl.get(12).replace(function(row) { return {'id':row('id')}; })
      rb: tbl.get(12).replace{ |row| { :id => row[:id] } }
      ot: ({'unchanged':1})

    # Replace single row

    - py: tbl.get(12).replace(lambda row:{'id':row['id'], 'a':row['id']})
      js: tbl.get(12).replace(function(row) { return {'id':row('id'), 'a':row('id')}; })
      rb: tbl.get(12).replace{ |row| { :id => row[:id], :a => row[:id] } }
      ot: ({'replaced':1})

    - py: tbl.get(13).replace(lambda row:None)
      js: tbl.get(13).replace(function(row) { return null; })
      rb: tbl.get(13).replace{ |row| nil }
      ot: ({'deleted':1})

    # Replace selection of table

    - py: tbl.between(10, 20).replace(lambda row:{'a':1})
      js: tbl.between(10, 20).replace(function(row) { return {'a':1}; })
      ot: ({'errors':10, 'first_error':'Inserted object must have primary key `id`:\n{\n\t\"a\":\t1\n}'})
      rb: 
        cd: tbl.between(10, 20).replace{ |row| {:a => 1} }
        ot: "{:errors => 10, :first_error => \"Inserted object must have primary key `id`:\\n{\\n\\t\\\"a\\\":\\t1\\n}\"}"



    - py: tbl.filter(lambda row:(row['id'] >= 10) & (row['id'] < 20)).replace(lambda row:{'id':row['id'], 'a':row['id']})
      js: tbl.filter(function(row) { return row('id').ge(10).and(row('id').lt(20))}).replace(function(row) { return {'id':row('id'), 'a':row('id')}; })
      rb: tbl.filter{ |row|
            (row[:id] >= 10).and(row[:id] < 20)
          }.replace{ |row|
            { :id => row[:id], :a => row[:id] } }
      ot: ({'replaced':8, 'unchanged':1})

    # trying to change pkey of a document
    - cd: tbl.get(1).replace({'id':2,'a':1})
      ot: ({'first_error':'Primary key `id` cannot be changed ({\n\t"id":\t1\n} -> {\n\t"a":\t1,\n\t"id":\t2\n})','errors':1})
      
    # not passing a pkey in the first place
    - cd: tbl.get(1).replace({'a':1})
      ot: ({'first_error':'Inserted object must have primary key `id`:\n{\n\t"a":\t1\n}','errors':1})
    
    # check r.row, static value and otherwise
    - py: tbl.get(1).replace({'id':r.row['id'],'a':'b'})
      js: tbl.get(1).replace({'id':r.row('id'),'a':'b'})
      ot: ({'replaced':1})
      
    - cd: tbl.get(1).replace(r.row.merge({'a':'b'}))
      ot: ({'unchanged':1})
      
    # test atomicity constraints
    - cd: tbl.get(1).replace(r.row.merge({'c':r.js('5')}))
      ot: err('RqlRuntimeError', 'Could not prove function deterministic.  Maybe you want to use the non_atomic flag?', [0])
      
    - cd: tbl.get(1).replace(r.row.merge({'c':tbl.nth(0)}))
      ot: err('RqlRuntimeError', 'Could not prove function deterministic.  Maybe you want to use the non_atomic flag?', [0])
      
    - py: tbl.get(1).replace(r.row.merge({'c':r.js('5')}), non_atomic=True)
      js: tbl.get(1).replace(r.row.merge({'c':r.js('5')}), {'nonAtomic':true})
      ot: ({'replaced':1})
      
    - js: tbl.get(1).replace({}, 'foo')
      py: []
      ot: err('RqlDriverError', 'Expected 1 argument(s) but found 2.')
      
    - js: tbl.get(1).replace({}, {'foo':'bar'})
      py: []
      ot: err('RqlDriverError', 'Invalid option `foo`.')
      
    # Replace whole table

    - py: tbl.replace(lambda row:None)
      js: tbl.replace(function(row) { return null; })
      rb: tbl.replace{ |row| nil }
      ot: ({'deleted':99})

    # clean up
    - cd: r.db('test').table_drop('test')
      ot: "({'dropped':1})"
    - cd: r.db('test').table_drop('test2')
      ot: "({'dropped':1})"



