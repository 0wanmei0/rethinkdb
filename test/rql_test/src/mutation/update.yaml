desc: Tests updates of selections
tests:

    # Set up some data
    - cd: r.db('test').table_create('test')
      ot: ({'created':1})

    - def: tbl = r.db('test').table('test')

    - cd: r.db('test').table_create('test2')
      ot: ({'created':1})

    - def: tbl2 = r.db('test').table('test2')

    - py: tbl.insert([{'id':i} for i in xrange(100)])
      js: |
        tbl.insert(function(){
            var res = []
            for (var i = 0; i < 100; i++) {
                res.push({id:i});
            }
            return res;
        }())
      rb: tbl.insert((0...100).map{ |i| { :id => i } })
      ot: ({'inserted':100})

    - cd: tbl.count()
      ot: 100

    # Identity
    - py: tbl.get(12).update(lambda row:row)
      js: tbl.get(12).update(function(row) { return row; })
      rb: tbl.get(12).update{ |row| row}
      ot: ({'unchanged':1})

    # Point update
    - py: tbl.get(12).update(lambda row:{'a':row['id']})
      js: tbl.get(12).update(function(row) { return {'a':row('id')}; })
      rb: tbl.get(12).update{ |row| { :a => row[:id] } }
      ot: ({'replaced':1})

    - cd: tbl.get(12)
      ot: ({'id':12, 'a':12})

    # Update selection of table

    - py: tbl.between(10, 19).update(lambda row:{'a':row['id']})
      js: tbl.between(10, 19).update(function(row) { return {'a':row('id')}; })
      rb: tbl.between(10, 19).update{ |row| { :a => row[:id] } }
      ot: ({'replaced':9, 'unchanged':1})

    - py: tbl.filter(lambda row:(row['id'] >= 10) & (row['id'] < 20)).update(lambda row:{'a':row['id']})
      js: tbl.filter(function(row) { return row('id').ge(10).and(row('id').lt(20))}).update(function(row) { return {'a':row('id')}; })
      rb: tbl.filter{ |row| (row[:id] >= 10).and(row[:id] < 20) }.update{ |row| { :a => row[:id] } }
      ot: ({'unchanged':10 })

    - py: tbl.filter(lambda row:(row['id'] >= 10) & (row['id'] < 20)).update(lambda row:{'b':row['id']})
      js: tbl.filter(function(row) { return row('id').ge(10).and(row('id').lt(20))}).update(function(row) { return {'b':row('id')}; })
      rb: tbl.filter{ |row| (row[:id] >= 10).and(row[:id] < 20) }.update{ |row| { :b => row[:id] } }
      ot: ({'replaced':10 })

    # Update whole table
    - py: tbl.update(lambda row:{'a':row['id']})
      js: tbl.update(function(row) { return {'a':row('id')}; })
      rb: tbl.update{ |row| { :a => row['id'] } }
      ot: ({'replaced':90, 'unchanged':10})

    # clean up
    - cd: r.db('test').table_drop('test')
      ot: ({'dropped':1})
    - cd: r.db('test').table_drop('test2')
      ot: ({'dropped':1})
      
    # TODO: test static value syntax (make sure r.row works)
    # TODO: test atomicity constraints (positive and negative test)
    # TODO: test seq.filter(...).filter(...).update
    # TODO: test trying to change pkey of a document
