desc: Tests RQL control flow structures
tests:
    
    ## FunCall

    - py: "r.expr(1).do(lambda v: v * 2)"
      js: r.expr(1).do(function(v) { return v.mul(2); })
      rb: r.expr(1).do{|v| v * 2 }
      ot: 2

    - py: "r.expr([0, 1, 2]).do(lambda v: v.append(3))"
      js: r([0, 1, 2]).do(function(v) { return v.append(3); })
      ot: [0, 1, 2, 3]

    - py: "r.do(1, 2, lambda x, y: x + y)"
      js: r.do(1, 2, function(x, y) { return x.add(y); })
      rb: r.do(1, 2) {|x, y| x + y}
      ot: 3

    # FunCall errors

    - py: "r.expr('abc').do(lambda v: v.append(3))"
      js: r('abc').do(function(v) { return v.append(3); })
      ot: err("RqlRuntimeError", "Expected type ARRAY but found STRING.", [1, 0])

    - py: "r.expr('abc').do(lambda v: v + 3)"
      js: r('abc').do(function(v) { return v.add(3); })
      ot: err("RqlRuntimeError", "Expected type STRING but found NUMBER.", [1, 1])

    - py: "r.expr('abc').do(lambda v: v + 'def') + 3"
      js: r('abc').do(function(v) { return v.add('def'); }).add(3)
      ot: err("RqlRuntimeError", "Expected type STRING but found NUMBER.", [1])

    - py: "r.expr(0).do(lambda a,b: a + b)"
      js: r(0).do(function(a,b) { return a.add(b); })
      ot: err("RqlRuntimeError", 'Expected 2 argument(s) but found 1.', [1])

    - py: "r.do(1, 2, lambda a: a)"
      js: r.do(1,2, function(a) { return a; })
      ot: err("RqlRuntimeError", 'Expected 1 argument(s) but found 2.', [1])

    ## Branch

    - cd: r.branch(True, 1, 2)
      ot: 1
    - cd: r.branch(False, 1, 2)
      ot: 2

    # Branch errors

    - cd: r.branch(1, 'c', False)
      ot: err("RqlRuntimeError", "Expected type BOOL but found NUMBER.", [0])

    - cd: r.branch('a', {}, [])
      ot: err("RqlRuntimeError", "Expected type BOOL but found STRING.", [0])

    # r.error()
    - cd: r.error('Hello World')
      ot: err("RqlRuntimeError", "Hello World", [0])
      
    # r.error() negative cases
    - cd: r.error()
      ot: err("RqlDriverError", "Expected 1 argument but found 0.", [0])
      
    - cd: r.error('foo', 'bar')
      ot: err("RqlDriverError", "Expected 1 argument but found 2.", [0])
      
    - cd: r.error(5) # we might want to allow this eventually
      ot: err("RqlRuntimeError", "Expected type STRING but found NUMBER.", [0])

    # r.js()
    - cd: r.js('1 + 1')
      ot: 2
      
    - cd: r.js('1 + 1; 2 + 2')
      ot: 4

    - cd: r.do(1, 2, r.js('(function(a, b) { return a + b; })'))
      ot: 3

    # TODO: screw with the number of arguments in the JS function (too few too many)
      
    - cd: r.expr(1).do(r.js('(function(x) { return x + 1; })'))
      ot: 2

    - cd: r.expr('foo').do(r.js('(function(x) { return x + "bar"; })'))
      ot: "'foobar'"

    # js error cases
    - cd: r.js('(function() { return 1; })')
      ot: err("RqlRuntimeError", "Expected type JSON but found Unknown.", [0])

    - cd: r.js('function() { return 1; }')
      ot: 'err("RqlRuntimeError", "SyntaxError: Unexpected token (", [0])'
      
    # TODO: add positive and negative forEach tests (including
    # returning read queries from a forEach, and calling forEach in
    # random places)

    # TODO: what happens if we pass static values to things that expect functions
    # TODO: passing r.js to seq.map (r.js(1), r.js(func))
