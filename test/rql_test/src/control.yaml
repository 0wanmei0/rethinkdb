desc: Tests RQL control flow structures
tests:
    
    ## FunCall

    - py: "r.expr(1).do(lambda v: v * 2)"
      js: r.expr(1).do(function(v) { return v.mul(2); })
      rb: r.expr(1).do{|v| v * 2 }
      ot: 2

    - py: "r.expr([0, 1, 2]).do(lambda v: v.append(3))"
      js: r([0, 1, 2]).do(function(v) { return v.append(3); })
      ot: [0, 1, 2, 3]

    - py: "r.do(1, 2, lambda x, y: x + y)"
      js: r.do(1, 2, function(x, y) { return x.add(y); })
      rb: r.do(1, 2) {|x, y| x + y}
      ot: 3

    # FunCall errors

    - py: "r.expr('abc').do(lambda v: v.append(3))"
      js: r('abc').do(function(v) { return v.append(3); })
      ot: err("RqlRuntimeError", "Expected type ARRAY but found STRING.", [1, 0])

    - py: "r.expr('abc').do(lambda v: v + 3)"
      js: r('abc').do(function(v) { return v.add(3); })
      ot: err("RqlRuntimeError", "Expected type STRING but found NUMBER.", [1, 1])

    - py: "r.expr('abc').do(lambda v: v + 'def') + 3"
      js: r('abc').do(function(v) { return v.add('def'); }).add(3)
      ot: err("RqlRuntimeError", "Expected type STRING but found NUMBER.", [1])

    - py: "r.expr(0).do(lambda a,b: a + b)"
      js: r(0).do(function(a,b) { return a.add(b); })
      ot: err("RqlRuntimeError", 'Expected 2 argument(s) but found 1.', [1])

    - py: "r.do(1, 2, lambda a: a)"
      js: r.do(1,2, function(a) { return a; })
      ot: err("RqlRuntimeError", 'Expected 1 argument(s) but found 2.', [1])

    ## Branch

    - cd: r.branch(True, 1, 2)
      ot: 1
    - cd: r.branch(False, 1, 2)
      ot: 2

    # Branch errors

    - cd: r.branch(1, 'c', False)
      ot: err("RqlRuntimeError", "Expected type BOOL but found NUMBER.", [0])

    - cd: r.branch('a', {}, [])
      ot: err("RqlRuntimeError", "Expected type BOOL but found STRING.", [0])

    # TODO: add r.js() tests
    # TODO: add r.error() tests
    # TODO: add positive and negative forEach tests (including
    # returning read queries from a forEach, and calling forEach in
    # random places)

