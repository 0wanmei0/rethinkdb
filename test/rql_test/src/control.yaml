desc: Tests RQL control flow structures
tests:
    
    # Setup
    - cd: r.db('test').table_create('test')
      ot: ({'created':1})
      def: tbl = r.db('test').table('test')
      
    ## FunCall

    - py: "r.expr(1).do(lambda v: v * 2)"
      js: r.expr(1).do(function(v) { return v.mul(2); })
      rb: r.expr(1).do{|v| v * 2 }
      ot: 2

    - py: "r.expr([0, 1, 2]).do(lambda v: v.append(3))"
      js: r([0, 1, 2]).do(function(v) { return v.append(3); })
      rb: r([0, 1, 2]).do{ |v| v.append(3) }
      ot: [0, 1, 2, 3]

    - py: "r.do(1, 2, lambda x, y: x + y)"
      js: r.do(1, 2, function(x, y) { return x.add(y); })
      rb: r.do(1, 2) {|x, y| x + y}
      ot: 3

    - py: "r.do(lambda: 1)"
      js: r.do(function() { return 1; })
      rb: r.do{1}
      ot: 1

    # do error cases
    - py: "r.do(1, 2, lambda x: x)"
      js: r.do(1, 2, function(x) { return x; })
      rb: r.do(1, 2) {|x| x}
      ot: err("RqlRuntimeError", 'Expected 1 argument(s) but found 2.', [1])
      
    - py: "r.do(1, 2, 3, lambda x, y: x + y)"
      js: r.do(1, 2, 3, function(x, y) { return x.add(y); })
      rb: r.do(1, 2, 3) {|x, y| x + y}
      ot: err("RqlRuntimeError", 'Expected 2 argument(s) but found 3.', [1])
      
    # YYY
    #- cd: "r.do(1)"
    #  ot: err("RqlRuntimeError", 'Expected type Function(*) but found NUMBER.', [1])

    - js: r.do(1, function(x) {})
      cd: []
      ot: err("RqlDriverError", 'Unknown datum value "undefined", did you forget a "return"?', [1])
    
    - cd: r.do()
      py: [] # Case handled by native python error
      ot: err("RqlDriverError", 'Expected 1 or more argument(s) but found 0.', [1])
      
    
    # FunCall errors

    - py: "r.expr('abc').do(lambda v: v.append(3))"
      js: r('abc').do(function(v) { return v.append(3); })
      rb: r('abc').do{ |v| v.append(3) }
      ot: err("RqlRuntimeError", "Expected type ARRAY but found STRING.", [1, 0])

    - py: "r.expr('abc').do(lambda v: v + 3)"
      js: r('abc').do(function(v) { return v.add(3); })
      rb: r('abc').do{ |v| v + 3 }
      ot: err("RqlRuntimeError", "Expected type STRING but found NUMBER.", [1, 1])

    - py: "r.expr('abc').do(lambda v: v + 'def') + 3"
      js: r('abc').do(function(v) { return v.add('def'); }).add(3)
      rb: r('abc').do{ |v| v + 'def' } + 3
      ot: err("RqlRuntimeError", "Expected type STRING but found NUMBER.", [1])

    - py: "r.expr(0).do(lambda a,b: a + b)"
      js: r(0).do(function(a,b) { return a.add(b); })
      rb: r(0).do{ |a, b| a + b }
      ot: err("RqlRuntimeError", 'Expected 2 argument(s) but found 1.', [1])

    - py: "r.do(1, 2, lambda a: a)"
      js: r.do(1,2, function(a) { return a; })
      rb: r.do(1, 2) { |a| a }
      ot: err("RqlRuntimeError", 'Expected 1 argument(s) but found 2.', [1])

    ## Branch

    - cd: r.branch(True, 1, 2)
      ot: 1
    - cd: r.branch(False, 1, 2)
      ot: 2

    # Branch errors

    - cd: r.branch(1, 'c', False)
      ot: err("RqlRuntimeError", "Expected type BOOL but found NUMBER.", [0])

    - cd: r.branch('a', {}, [])
      ot: err("RqlRuntimeError", "Expected type BOOL but found STRING.", [0])

    # r.error()
    - cd: r.error('Hello World')
      ot: err("RqlRuntimeError", "Hello World", [0])
      
    # r.error() negative cases
    - cd: r.error()
      py: [] # Here we rely on a native python error
      ot: err("RqlDriverError", "Expected 1 argument(s) but found 0.", [0])
      
    - cd: r.error('foo', 'bar')
      py: [] # Here we rely on a native python error
      ot: err("RqlDriverError", "Expected 1 argument(s) but found 2.", [0])
      
    - cd: r.error(5) # we might want to allow this eventually
      ot: err("RqlRuntimeError", "Expected type STRING but found NUMBER.", [0])

    # TODO: test arity checking in other functions (so far we got do, js, and error)

    # r.js()
    - cd: r.js('1 + 1')
      ot: 2
      
    - cd: r.js('1 + 1; 2 + 2')
      ot: 4

    - cd: r.do(1, 2, r.js('(function(a, b) { return a + b; })'))
      ot: 3

    # TODO: screw with the number of arguments in the JS function (too few too many)
      
    - cd: r.expr(1).do(r.js('(function(x) { return x + 1; })'))
      ot: 2

    - cd: r.expr('foo').do(r.js('(function(x) { return x + "bar"; })'))
      ot: "'foobar'"

    # js error cases
    # YYY
    #- cd: r.js('(function() { return 1; })')
    #  ot: err("RqlRuntimeError", "Query result must be of type DATUM or Stream.", [0])

    - cd: r.js('function() { return 1; }')
      ot: 'err("RqlRuntimeError", "SyntaxError: Unexpected token (", [0])'
      
    # TODO: passing r.js to seq.map (r.js(1), r.js(func))
    # TODO: check r.js function not returning a value (e.g. undefined) in filter
    
    # TODO: what happens if we pass static values to things that expect functions (=> error unless we explicitly define it)

    # forEach
    - cd: tbl.count()
      ot: 0

    # Insert three elements
    - js: r([1, 2, 3]).forEach(function (row) { return tbl.insert({ id:row }) })
      py: r.expr([1, 2, 3]).for_each(lambda row:tbl.insert({ 'id':row }))
      rb: r([1, 2, 3]).for_each{ |row| tbl.insert { :id => row } }
      ot: ({'inserted':3})

    - cd: tbl.count()
      ot: 3

    # Update each row to add additional attribute
    - js: r([1, 2, 3]).forEach(function (row) { return tbl.update({ foo:row }) })
      py: r.expr([1,2,3]).for_each(lambda row:tbl.update({'foo':row}))
      ot: ({'replaced':9})
      
    # Insert three more elements (and error on three)
    - js: r([1, 2, 3]).forEach(function (row) { return [tbl.insert({ id:row }), tbl.insert({ id:row.mul(10) })] })
      py: r.expr([1,2,3]).for_each(lambda row:tbl.insert([tbl.insert({ 'id':row }), tbl.insert({ 'id':row*10 })]))
      ot: ({'inserted':3,'errors':3,'first_error':'Duplicate primary key.'})

    - cd: tbl.count()
      ot: 6

    # We have six element, update them 6*2*3=36 times
    - js: r([1, 2, 3]).forEach(function (row) { return [tbl.update({ foo:row }), tbl.update({ bar:row })] })
      py: r.expr([1,2,3]).for_each(lambda row:[tbl.update({'foo':row}), tbl.update({'bar':row})])
      ot: ({'replaced':36})
      
    - cd: r.expr([1, 2, 3]).for_each( tbl.insert({ 'id':r.row }) )
      ot: err("RqlCompileError", "No implicit variable is bound.", [0]) # TODO: change this error message, it's terrible
    
    # forEach negative cases
    # YYY
    #- cd: r.expr([1, 2, 3]).for_each(1)
    #  ot: 'err("RqlRuntimeError", "Expected type Function(1) but found NUMBER.", [0])'

    - py: r.expr([1, 2, 3]).for_each(lambda x:x)
      js: r([1, 2, 3]).forEach(function (x) { return x; })
      ot: 'err("RqlRuntimeError", "Expected type WriteQuery but found NUMBER.", [0])'
    
    - cd: r.expr([1, 2, 3]).for_each(r.row)
      ot: err("RqlRuntimeError", "Expected type WriteQuery but found NUMBER.", [0])

    - js: r([1, 2, 3]).forEach(function (row) { return tbl; })
      py: r.expr([1, 2, 3]).for_each(lambda row:tbl)
      ot: err("RqlRuntimeError", "Expected type WriteQuery but found Table.", [0])
    
    - js: "r([1, 2, 3]).forEach(function (row) {})"
      ot: err("RqlDriverError", 'Unknown datum value "undefined", did you forget a "return"?', [1])
    
    # TODO: try calling write queries in random places (e.g. in `do`))

    # Cleanup    
    - cd: r.db('test').table_drop('test')
      ot: ({'dropped':1})
