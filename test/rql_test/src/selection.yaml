desc: Tests that manipulation data in tables
tests:

    # Set up some data
    - cd: r.db('test').table_create('test')
      ot: ({'created':1})
      def: tbl = r.db('test').table('test')

    - cd: r.db('test').table_create('test2')
      ot: ({'created':1})
      def: tbl2 = r.db('test').table('test2')

    - py: tbl.insert([{'id':i, 'a':i%4} for i in xrange(100)])
      js: |
        tbl.insert(function(){
            var res = []
            for (var i = 0; i < 100; i++) {
                res.push({id:i, 'a':i%4});
            }
            return res;
        }())
      rb: tbl.insert((0..99).map{ |i| { :id => i, :a => i % 4 } })
      ot: ({'inserted':100})

    - py: tbl2.insert([{'id':i, 'b':i%4} for i in xrange(100)])
      js: |
        tbl2.insert(function(){
            var res = []
            for (var i = 0; i < 100; i++) {
                res.push({id:i, 'b':i%4});
            }
            return res;
        }())
      rb: tbl2.insert((0..99).map{ |i| { :id => i, :b => i % 4 } })
      ot: ({'inserted':100})

    # Missing db case
    - cd: r.db('missing').table('bar')
      ot: err("RqlRuntimeError", 'Database "missing" does not exist.', [0])

    # Missing table case
    - cd: r.db('test').table('missing')
      ot: err("RqlRuntimeError", 'Table "missing" does not exist.', [0])

    # TODO: make sure we can insert and query json docs by arbitrary unicode attrs

    # XXX: fix this
    #- cd: r.db('#$%')
    #  ot: err("RqlCompileError", 'Database name "#$%" invalid (Use A-Za-z0-9_ only).', [0])
    
    # XXX: fix this
    #- cd: r.db('test').table('#$%')
    #  ot: err("RqlCompileError", 'Table name "#$%" invalid (Use A-Za-z0-9_ only).', [0])

    # Access a table from default db
    # XXX: enable this later
    #- cd: r.table('test').count()
    #  ot: 100

    # XXX: enable this later
    #- cd: tbl.get(20).count()
    #  ot: err("RqlRuntimeError", 'Expected type Sequence but found SingleSelection.', [0])
      
    # Get a document that exists
    - cd: tbl.get(20)
      ot: ({'id':20,'a':0})
      
    # Get a document that doesn't exist
    - cd: tbl.get(2000)
      ot: (null) # XXX: make the test framework convert 'null' to 'None' in python and whatever ruby alternative is
      
    # Make sure get only takes one arg (since we used to be able to pass id)
    # XXX: enable this
    #- cd: tbl.get()
    #  ot: err("RqlRuntimeError", 'Expected 1 argument(s) but found 0.', [1])
     
    # XXX: enable this
    #- cd: tbl.get(10, 20)
    #  ot: err("RqlRuntimeError", 'Expected 1 argument(s) but found 2.', [1])
      
    # TODO: test GET for table where id isn't a primary key

    # Between
    - cd: tbl.between(20,29).count()
      ot: 10
    - cd: tbl.between(-10,9).count() 
      ot: 10
    - cd: tbl.between(80,2000).count()
      ot: 20
    - cd: tbl.between(-2000, 2000).count()
      ot: 100
    
    # Between shouldn't work on arrays
    # XXX: fix this later
    #- cd: r.expr([1, 2, 3]).between(-1, 2)
    #  ot: err('RqlRuntimeError', 'Expected type StreamSelection but found Array.', [0])

    # TODO: test between on non-selections
    # TODO: test between without the first argument
    # TODO: test between without the second argument
    # TODO: test between that has a wider range than the one in the db
    # TODO: does between still support attribute specification?
    # TODO: test between table where id isn't a primary key

    # Filter
    # TODO: test static value syntax for filter (make sure r.row in it works)
    # TODO: test seq.filter.filter
    # TODO: test not returning a boolean
    - py: tbl.filter(lambda row:row['a'] > 2).count()
      js: tbl.filter(function(row) { return row('a').gt(2); }).count()
      rb: tbl.filter{ |row| row[:a] > 2 }.count
      ot: 25

    # TODO: seq.filter(true) => error
    # TODO: seq.filter(1)    => error
    
    # Clean up
    - cd: r.db('test').table_drop('test')
      ot: ({'dropped':1})
    - cd: r.db('test').table_drop('test2')
      ot: ({'dropped':1})

    # TODO: make sure merge (and other things) are polymorphic on objects and streams
    # TODO: seq.map(r.row[:foo])
