desc: sindex api (#602)
tests:

  - cd: r.db('test').table_create('sindex_api')
    def: tbl = r.table('sindex_api')

  - rb: tbl.insert([{:id => 0, :a => 0, :b => 0, :c => 0},
                    {:id => 1, :a => 0, :b => 0, :c => 0},
                    {:id => 2, :a => 0, :b => 0, :c => 1},
                    {:id => 3, :a => 0, :b => 1, :c => 1}])
    py: tbl.insert([{'id':0, 'a':0, 'b':0, 'c':0},
                    {'id':1, 'a':0, 'b':0, 'c':0},
                    {'id':2, 'a':0, 'b':0, 'c':1},
                    {'id':3, 'a':0, 'b':1, 'c':1}])
    ot: ({'deleted':0,'inserted':4,'skipped':0,'errors':0,'replaced':0,'unchanged':0})

  - rb: tbl.index_create('ai') {|row| row[:a]}
    py: tbl.index_create('ai', r.row['a'])
    ot: ({'created':1})
  - rb: tbl.index_create('ai') {|row| row[:a]}
    py: tbl.index_create('ai', r.row['a'])
    ot: 'err("RqlRuntimeError", "Index `ai` already exists.", [])'
  - rb: tbl.index_create('bi') {|row| row[:b]}
    py: tbl.index_create('bi', r.row['b'])
    ot: ({'created':1})
  - rb: tbl.index_create('ci') {|row| row[:c]}
    py: tbl.index_create('ci', r.row['c'])
    ot: ({'created':1})
  - rb: tbl.index_create('idi') {|row| row[:id]}
    py: tbl.index_create('idi', r.row['id'])
    ot: ({'created':1})
  - rb: tbl.index_create('brokeni') {|row| row[:broken]}
    py: tbl.index_create('brokeni', r.row['broken'])
    ot: ({'created':1})

  - rb: tbl.get(true)
    py: tbl.get(True)
    ot: 'err("RqlRuntimeError", "Primary keys must be either a number or a string (got true of type BOOL).", [])'
  - cd: tbl.get([])
    ot: 'err("RqlRuntimeError", "Primary keys must be either a number or a string (got [] of type ARRAY).", [])'
  - cd: tbl.get(-1)
    ot: null
  - rb: tbl.get(1)[:id]
    py: tbl.get(1)['id']
    ot: 1
  - rb: tbl.get(1).typeof
    py: tbl.get(1).type_of()
    ot: ('SINGLE_SELECTION')
  - rb: tbl.get(1).update{nil}
    py: tbl.get(1).update(lambda x:None)
    ot: ({'replaced':0,'skipped':0,'deleted':0,'unchanged':1,'errors':0,'inserted':0})
  - rb: tbl.get(1, :ai)
    py: tbl.get(1, 'ai')
    ot:
      rb: 'err("RqlCompileError", "Expected 2 argument(s) but found 3.", [])'
      py: err("TypeError", 'get() takes exactly 2 arguments (3 given)')

  - rb: tbl.get_all(true)
    py: tbl.get_all(True)
    ot: 'err("RqlRuntimeError", "Primary keys must be either a number or a string (got true of type BOOL).", [])'
  - cd: tbl.get_all(-1)
    ot: []
  - rb: tbl.get_all(1)[0][:id]
    py: tbl.get_all(1)[0]['id']
    ot: 1
  - rb: tbl.get_all(1).typeof
    py: tbl.get_all(1).type_of()
    ot: ('SELECTION')
  - rb: tbl.get_all(1).update{nil}
    py: tbl.get_all(1).update(lambda x:None)
    ot: ({'replaced':0,'skipped':0,'deleted':0,'unchanged':1,'errors':0,'inserted':0})

  - rb: tbl.get_all(0, :index => :fake)
    py: tbl.get_all(0, index='fake')
    ot: 'err("RqlRuntimeError", "Index `fake` was not found.", [])'
  - rb: tbl.get_all(0, :index => false)
    py: tbl.get_all(0, index=False)
    ot: 'err("RqlRuntimeError", "Expected type STRING but found BOOL.", [])'

  - rb: tbl.get_all(true, :index => :id)
    py: tbl.get_all(True, index='id')
    ot: 'err("RqlRuntimeError", "Primary keys must be either a number or a string (got true of type BOOL).", [])'
  - rb: tbl.get_all([], :index => :id)
    py: tbl.get_all([], index='id')
    ot: 'err("RqlRuntimeError", "Primary keys must be either a number or a string (got [] of type ARRAY).", [])'
  - rb: tbl.get_all(true, :index => :idi)
    py: tbl.get_all(True, index='idi')
    ot: 'err("RqlRuntimeError", "Secondary keys must be a number, string, or array (got true of type BOOL).", [])'
  - rb: tbl.get_all([], :index => :idi)
    py: tbl.get_all([], index='idi')
    ot: []

  - rb: tbl.get_all(1, :index => :id)[0][:id]
    py: tbl.get_all(1, index='id')[0]['id']
    ot: 1
  - rb: tbl.get_all(1, :index => :idi)[0][:id]
    py: tbl.get_all(1, index='idi')[0]['id']
    ot: 1
  - rb: tbl.get_all(1, :index => :ai)
    py: tbl.get_all(1, index='ai')
    ot: []
  - rb: tbl.get_all(1, :index => :bi).orderby(:id).map{|x| x[:id]}
    py: tbl.get_all(1, index='bi').order_by('id').map(lambda x:x['id'])
    ot: [3]
  - rb: tbl.get_all(1, :index => :ci).orderby(:id).map{|x| x[:id]}
    py: tbl.get_all(1, index='ci').order_by('id').map(lambda x:x['id'])
    ot: [2, 3]
  - rb: tbl.get_all(1, :index => :ci).typeof
    py: tbl.get_all(1, index='ci').type_of()
    ot: ('SELECTION')
  - rb: tbl.get_all(1, :index => :ci).update{nil}
    py: tbl.get_all(1, index='ci').update(lambda x:None)
    ot: ({'replaced':0,'skipped':0,'deleted':0,'unchanged':2,'errors':0,'inserted':0})
  - rb: tbl.get_all(1, :index => :brokeni)
    py: tbl.get_all(1, index='brokeni')
    ot: []

  - rb: tbl.eq_join(:id, tbl, :index => :fake)
    py: tbl.eq_join('id', tbl, index='fake')
    ot: 'err("RqlRuntimeError", "Index `fake` was not found.", [])'
  - rb: tbl.eq_join(:id, tbl, :index => false)
    py: tbl.eq_join('id', tbl, index=False)
    ot: 'err("RqlRuntimeError", "Expected type STRING but found BOOL.", [])'

  - rb: tbl.filter({:id => 0}).eq_join(:id, tbl)
    py: tbl.filter({'id':0}).eq_join('id', tbl)
    ot: ([{'left':{'a':0,'b':0,'c':0,'id':0},'right':{'a':0,'b':0,'c':0,'id':0}}])
  - rb: tbl.filter({:id => 0}).eq_join(:id, tbl, :index => :id)
    py: tbl.filter({'id':0}).eq_join('id', tbl, index='id')
    ot: ([{'left':{'a':0,'b':0,'c':0,'id':0},'right':{'a':0,'b':0,'c':0,'id':0}}])
  - rb: tbl.filter({:id => 0}).eq_join(:id, tbl, :index => :idi)
    py: tbl.filter({'id':0}).eq_join('id', tbl, index='idi')
    ot: ([{'left':{'a':0,'b':0,'c':0,'id':0},'right':{'a':0,'b':0,'c':0,'id':0}}])
  - rb: tbl.filter({:id => 0}).eq_join(:id, tbl, :index => :ai).orderby(:right)
    py: tbl.filter({'id':0}).eq_join('id', tbl, index='ai').order_by('right')
    ot: [{'right':{'id':0,'a':0,'b':0,'c':0},'left':{'id':0,'a':0,'b':0,'c':0}},
         {'right':{'id':1,'a':0,'b':0,'c':0},'left':{'id':0,'a':0,'b':0,'c':0}},
         {'right':{'id':2,'a':0,'b':0,'c':1},'left':{'id':0,'a':0,'b':0,'c':0}},
         {'right':{'id':3,'a':0,'b':1,'c':1},'left':{'id':0,'a':0,'b':0,'c':0}}]
  - rb: tbl.filter({:id => 0}).eq_join(:id, tbl, :index => :bi).orderby(:right)
    py: tbl.filter({'id':0}).eq_join('id', tbl, index='bi').order_by('right')
    ot: [{'right':{'id':0,'a':0,'b':0,'c':0},'left':{'id':0,'a':0,'b':0,'c':0}},
         {'right':{'id':1,'a':0,'b':0,'c':0},'left':{'id':0,'a':0,'b':0,'c':0}},
         {'right':{'id':2,'a':0,'b':0,'c':1},'left':{'id':0,'a':0,'b':0,'c':0}}]
  - rb: tbl.filter({:id => 0}).eq_join(:id, tbl, :index => :ci).orderby(:right)
    py: tbl.filter({'id':0}).eq_join('id', tbl, index='ci').order_by('right')
    ot: [{'right':{'id':0,'a':0,'b':0,'c':0},'left':{'id':0,'a':0,'b':0,'c':0}},
         {'right':{'id':1,'a':0,'b':0,'c':0},'left':{'id':0,'a':0,'b':0,'c':0}}]
  - rb: tbl.filter({:id => 0}).eq_join(:id, tbl, :index => :brokeni)
    py: tbl.filter({'id':0}).eq_join('id', tbl, index='brokeni')
    ot: []

  - rb: tbl.eq_join(:c, tbl, :index => :bi).orderby(:right, :left)
    py: tbl.eq_join('c', tbl, index='bi').order_by('right', 'left')
    ot: ([{'left':{'id':0,'a':0,'b':0,'c':0},'right':{'id':0,'a':0,'b':0,'c':0}},
          {'left':{'id':1,'a':0,'b':0,'c':0},'right':{'id':0,'a':0,'b':0,'c':0}},
          {'left':{'id':0,'a':0,'b':0,'c':0},'right':{'id':1,'a':0,'b':0,'c':0}},
          {'left':{'id':1,'a':0,'b':0,'c':0},'right':{'id':1,'a':0,'b':0,'c':0}},
          {'left':{'id':0,'a':0,'b':0,'c':0},'right':{'id':2,'a':0,'b':0,'c':1}},
          {'left':{'id':1,'a':0,'b':0,'c':0},'right':{'id':2,'a':0,'b':0,'c':1}},
          {'left':{'id':2,'a':0,'b':0,'c':1},'right':{'id':3,'a':0,'b':1,'c':1}},
          {'left':{'id':3,'a':0,'b':1,'c':1},'right':{'id':3,'a':0,'b':1,'c':1}}])

  - cd: tbl.index_create('id')
    ot: 'err("RqlRuntimeError", "Index name conflict: `id` is the name of the primary key.", [])'

  - cd: tbl.index_create('c')
    ot: ({'created':1})
  - cd: tbl.index_create('broken')
    ot: ({'created':1})

  - rb: tbl.get_all(1, :index => 'c').orderby(:id).map{|x| x[:id]}
    py: tbl.get_all(1, index='c').order_by('id').map(lambda x:x['id'])
    ot: [2, 3]
  - rb: tbl.get_all(1, :index => 'broken').orderby(:broken).map{|x| x[:id]}
    py: tbl.get_all(1, index='broken').order_by('broken').map(lambda x:x['id'])
    ot: []

  - rb: tbl.index_create('nil') {nil}
    py: tbl.index_create('nil', lambda x:None)
    ot: ({'created':1})
  - rb: tbl.get_all(nil, :index => :nil)
    py: tbl.get_all(None, index='nil')
    ot: 'err("RqlRuntimeError", "Secondary keys must be a number, string, or array (got nu""ll of type NULL).", [])'

  - rb: tbl.insert({:id => 4, :a => 4, :b => 4, :c => 4})
    py: tbl.insert({'id':4, 'a':4, 'b':4, 'c':4})
    ot: ({'deleted':0,'inserted':1,'skipped':0,'errors':0,'replaced':0,'unchanged':0})

  # We test to make sure that the other indexes were updated after the insert.
  - rb: tbl.eq_join(:id, tbl, :index => :c).orderby(:left, :right)
    py: tbl.eq_join('id', tbl, index='c').order_by('left', 'right')
    ot: [{'right':{'id':0,'a':0,'b':0,'c':0},'left':{'id':0,'a':0,'b':0,'c':0}},
         {'right':{'id':1,'a':0,'b':0,'c':0},'left':{'id':0,'a':0,'b':0,'c':0}},
         {'right':{'id':2,'a':0,'b':0,'c':1},'left':{'id':1,'a':0,'b':0,'c':0}},
         {'right':{'id':3,'a':0,'b':1,'c':1},'left':{'id':1,'a':0,'b':0,'c':0}},
         {'right':{'id':4,'a':4,'b':4,'c':4},'left':{'id':4,'a':4,'b':4,'c':4}}]

  - rb: tbl.eq_join(:id, tbl, :index => :ci).orderby(:left, :right)
    py: tbl.eq_join('id', tbl, index='ci').order_by('left', 'right')
    ot: [{'right':{'id':0,'a':0,'b':0,'c':0},'left':{'id':0,'a':0,'b':0,'c':0}},
         {'right':{'id':1,'a':0,'b':0,'c':0},'left':{'id':0,'a':0,'b':0,'c':0}},
         {'right':{'id':2,'a':0,'b':0,'c':1},'left':{'id':1,'a':0,'b':0,'c':0}},
         {'right':{'id':3,'a':0,'b':1,'c':1},'left':{'id':1,'a':0,'b':0,'c':0}},
         {'right':{'id':4,'a':4,'b':4,'c':4},'left':{'id':4,'a':4,'b':4,'c':4}}]

  - cd: r.db('test').table_drop('sindex_api')
