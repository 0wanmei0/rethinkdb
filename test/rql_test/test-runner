#!/usr/bin/python

from yaml import load
from os import walk
from sys import argv
from getopt import getopt
from subprocess import call, Popen
from time import sleep

class TestGroup:
    def __init__(self, path, group):
        self.path = path
        self.group = group

    def __iter__(self):
        return iter(self.group['tests'])

# Walk the test tree and get an object representing all
# the test data from the yaml files. Each yaml file defines
# a test group. The test groups themselves are nested by
# their directory structure.
def get_test_structure():
    tests = {}

    for root, dirs, files in walk("src"):
        
        # Find the nested group location from the root
        path = root.split('/')[1:]
        cur = tests
        for level in path:
            if not cur.has_key(level):
                cur[level] = {}
            cur = cur[level]
        
        # Parse and insert the yaml structures
        for name in filter(lambda name: name.endswith('.yaml'), files):
            test_group = load(open(root+'/'+name))
            leaf = name.partition('.')[0]
            cur[leaf] = TestGroup(path+[leaf], test_group)

    return tests

def build_test_scripts():
    tests = get_test_structure()

    build_script(tests, 'py')
    build_script(tests, 'js')

def myrepr(string, lang):
    if isinstance(string, unicode):
        if lang == 'py': 
            return repr(string)
        else:
            return '"'+string+'"'
    if isinstance(string, bool):
        if lang == 'js':
            return repr('true') if string else repr('false')
    return repr(str(string))

def build_script(tests, lang):
    script = open('build/test.'+lang, 'w+')
    
    driver = open('drivers/driver.'+lang)

    if lang is 'py':
        comment = '#'
    elif lang is 'js':
        comment = '//'

    # The driver is the head of the file
    script.write(driver.read())

    # Now append the tests
    def walk(level, ln):
        for name,sub in level.iteritems():
            script.write(comment*ln + ' ' + name + '\n')

            if isinstance(sub, TestGroup):
                script.write(comment*ln + '  ' + sub.group['desc'] + '\n\n')

                for test in sub:

                    # This test may define variables to be used later
                    if 'def' in test:
                        define = test['def']
                        if isinstance(define, dict):
                            if lang in define:
                                define = define[lang]
                            else:
                                define = None

                        if define:
                            script.write("define("+myrepr(define, lang)+")\n")

                    t = None
                    if 'cd' in test:
                        t = test['cd']
                    if lang in test:
                        t = test[lang]

                    if t:
                        if 'ot' in test:
                            expected = test['ot']
                    
                        # Test may be a dict providing specific values for this language
                        if isinstance(t, dict):
                            code = t['code']
                            if 'ot' in t:
                                expected = t['ot']
                        else:
                            code = t

                        # Test may be a list of syntactically different but practically similar variants 
                        if not isinstance(code, list):
                            code = [code]

                        # Write out each variant as a separate test
                        for variant in code:
                            test = "test("+myrepr(variant, lang)+", "+myrepr(expected, lang)+")\n"
                            script.write(test)
            else:
                script.write('\n')
                walk(sub, ln+1)
            script.write('\n'+comment*ln + '\n')
                
    walk(tests, 1)

class RethinkDBTestServers:
    def __init__(self):
        self.start()

    def start(self):
        self.cpp_server = Popen(['../../build/debug/rethinkdb'])
        self.js_server = Popen(['node', '../../rqljs/build/rqljs', '1'])
        sleep(0.1)

    def stop(self):
        self.cpp_server.terminate()
        self.js_server.terminate()
        self.clear_data()

    def clear_data(self):
        call(['rm', 'rethinkdb-data']) # JS server data
        call(['rm', '-r', 'rethinkdb_data'])

    def restart(self):
        self.stop()
        self.start()

def run_tests(lang):
    if lang is 'py':
        interpreter = 'python'
    elif lang is 'js':
        interpreter = 'node'

    print "Running "+lang+" tests\n"
    call([interpreter, 'build/test.'+lang])
    print "Finished running "+lang+" tests\n"

# Run the tests
def run():
    servers = RethinkDBTestServers()
    run_tests('py')
    servers.restart()
    run_tests('js')
    servers.stop()

def run_py():
    servers = RethinkDBTestServers()
    run_tests('py')
    servers.stop()

if __name__ == '__main__':
    eval(argv[1]+'()')
